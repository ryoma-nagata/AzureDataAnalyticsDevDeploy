{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "13215667281231234547"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "japaneast",
      "allowedValues": [
        "southcentralus",
        "southeastasia",
        "japaneast"
      ],
      "metadata": {
        "description": "リソースのデプロイリージョン"
      }
    },
    "project": {
      "type": "string",
      "metadata": {
        "description": "リソース名はproject-deployment_id-リソース種類-envとなります"
      },
      "maxLength": 7,
      "minLength": 3
    },
    "env": {
      "type": "string",
      "metadata": {
        "description": "リソース名はproject-deployment_id-リソース種類-envとなります"
      },
      "allowedValues": [
        "demo",
        "poc",
        "dev",
        "test",
        "prod",
        "stg"
      ]
    },
    "deployment_id": {
      "type": "string",
      "defaultValue": "01",
      "maxLength": 2,
      "metadata": {
        "description": "リソース名はproject-deployment_id-リソース種類-envとなります"
      }
    },
    "AdminGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "セキュリティグループの名称を入力すると自動で権限が付与されます"
      }
    },
    "AdminGroupObjectID": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "セキュリティグループのプリンシパルIDを入力すると自動で権限が付与されます"
      }
    },
    "VMAdministratorLogin": {
      "type": "string",
      "metadata": {
        "description": "各VMのログインID"
      }
    },
    "VMAdministratorLoginPassword": {
      "type": "secureString",
      "minLength": 12,
      "metadata": {
        "description": "各VMのログインパスワード"
      }
    },
    "addressPrefixs": {
      "type": "array",
      "defaultValue": [
        "10.4.0.0/14"
      ],
      "metadata": {
        "description": "Vnet範囲"
      }
    },
    "runtimeSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.4.0.0/26",
      "metadata": {
        "description": "統合ランタイム、Power BI Gateway用VM用サブネット"
      }
    },
    "privateEndpointSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.4.0.64/26",
      "metadata": {
        "description": "Private Endpoint用サブネット"
      }
    },
    "mlcomputesSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.4.1.0/24",
      "metadata": {
        "description": "Azure ML用サブネット"
      }
    },
    "adbPublicSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.4.2.0/24",
      "metadata": {
        "description": "Databricks用 Publicサブネット"
      }
    },
    "adbPrivateSubnetPrefix": {
      "type": "string",
      "defaultValue": "10.4.3.0/24",
      "metadata": {
        "description": "Databricks用 Privateサブネット"
      }
    },
    "WhiteListsStartEndIPs": {
      "type": "array",
      "defaultValue": [
        {
          "name": "sampleAllIp",
          "startIpAddress": "0.0.0.0",
          "endIpAddress": "255.255.255.255"
        }
      ],
      "metadata": {
        "description": "許可したいIP開始終了の配列"
      }
    },
    "WhiteListsCIDRs": {
      "type": "array",
      "defaultValue": [
        "*.*.*.*/*",
        "*.*.*.*"
      ],
      "metadata": {
        "description": "許可したいCIDR形式IPの配列"
      }
    },
    "isNeedDatabricks": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合Databrikcsをデプロイします。"
      }
    },
    "databricksAppObjectId": {
      "type": "string",
      "metadata": {
        "description": "databricks application のobject id"
      }
    },
    "isNeedDataFactory": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合DataFactoryをデプロイします。"
      }
    },
    "isNeedSHIRforDataFactory": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合DataFactory用セルフホステッド統合ランタイムをデプロイします。isNeedDataFactoryをFalseにした場合は無効です。"
      }
    },
    "isNeedMachineLearning": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合Azure Machine Learningをデプロイします。"
      }
    },
    "isNeedSynapse": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合Synapse Analyticsをデプロイします。"
      }
    },
    "isDLPEnable": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合Syanpse workspaceのデータ流出保護を有効にします※一部機能に制限がかかります。"
      }
    },
    "AllowAzure": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合Azureからの接続をすべて許可します。Synapse,SQLDBに対して影響します。"
      }
    },
    "sqlAdministratorUsername": {
      "type": "string",
      "defaultValue": "sqladmin",
      "metadata": {
        "description": "sql管理者ユーザー名"
      }
    },
    "sqlAdministratorPassword": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "sql管理者ユーザーパスワード。空欄可能"
      }
    },
    "isNeedSqlPool": {
      "type": "bool",
      "defaultValue": false,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合専用SQLPoolをデプロイします。"
      }
    },
    "sqlPoolBackupType": {
      "type": "string",
      "defaultValue": "GRS",
      "metadata": {
        "description": "GRSの場合専用SQLPoolのジオバックアップを有効化します。"
      },
      "allowedValues": [
        "LRS",
        "GRS"
      ]
    },
    "sqlPooldwu": {
      "type": "string",
      "defaultValue": "dw100c",
      "metadata": {
        "description": "専用SQLPoolのDWUを設定します。"
      },
      "allowedValues": [
        "dw100c",
        "dw200c",
        "dw300c",
        "dw400c",
        "dw500c"
      ]
    },
    "isNeedSHIRforSynepse": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合をSynapse用セルフホステッド統合ランタイムをデプロイします。isNeedSynapseをFalseにした場合は無効です。"
      }
    },
    "isNeedSQL": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合をSQLDBをデプロイします。"
      }
    },
    "isNeedVMforOnPremiseDataGateway": {
      "type": "bool",
      "defaultValue": true,
      "allowedValues": [
        true,
        false
      ],
      "metadata": {
        "description": "true の場合をOnpremise Data Gateway用VMをデプロイします。デプロイ後のインストールが必要です"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "WhiteListsCIDRRules",
        "count": "[length(parameters('WhiteListsCIDRs'))]",
        "input": {
          "value": "[parameters('WhiteListsCIDRs')[copyIndex('WhiteListsCIDRRules')]]",
          "action": "allow"
        }
      }
    ],
    "prefix": "[toLower(format('{0}-{1}', parameters('project'), parameters('deployment_id')))]",
    "vmsku": "Standard_A4_v2",
    "tags": {
      "Environment": "[parameters('env')]",
      "Project": "[parameters('project')]",
      "Deployment_id": "[parameters('deployment_id')]",
      "DeployMethod": "bicep"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "logging",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "prefix": {
            "value": "[variables('prefix')]"
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "WhiteListsCIDRRules": {
            "value": "[variables('WhiteListsCIDRRules')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "4252559789880004075"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "WhiteListsCIDRRules": {
              "type": "array"
            }
          },
          "variables": {
            "tagJoin": "[union(parameters('tags'), createObject('Group', 'logging'))]",
            "storageName": "[format('{0}-logst-{1}', parameters('prefix'), parameters('env'))]",
            "loganalyticsName": "[format('{0}-logws-{1}', parameters('prefix'), parameters('env'))]",
            "vulnerabilityscansConteinrName": "vulnerabilityscans"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('storageName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "fileSystemNames": {
                    "value": [
                      "[variables('vulnerabilityscansConteinrName')]"
                    ]
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageIPWhiteLists": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "storageName": {
                    "value": "[variables('storageName')]"
                  },
                  "storageSKU": {
                    "value": "Standard_LRS"
                  },
                  "isLCMonArchive": {
                    "value": true
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "14092242672869524569"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "storageIPWhiteLists": {
                      "type": "array"
                    },
                    "storageSKU": {
                      "type": "string"
                    },
                    "isLCMonArchive": {
                      "type": "bool",
                      "defaultValue": true
                    }
                  },
                  "variables": {
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[parameters('storageSKU')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Cool",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": false,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": "[parameters('storageIPWhiteLists')]",
                          "virtualNetworkRules": [],
                          "resourceAccessRules": []
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('isLCMonArchive'), true())]",
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "toArcive",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToArchive": {
                                      "daysAfterModificationGreaterThan": 360
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    },
                    "accessRule": {
                      "type": "string",
                      "value": "[format('{0}/providers/Microsoft.MachineLearningServices/workspaces/*', resourceGroup().id)]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('loganalyticsName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnanalyticsName": {
                    "value": "[variables('loganalyticsName')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "15001723437287224743"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "logAnanalyticsName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('logAnanalyticsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {},
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled",
                        "retentionInDays": 120,
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnanalyticsName'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('loganalyticsName'))).outputs.logAnalyticsWorkspaceId.value]"
            },
            "LoggingStorageId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('storageName'))).outputs.storageId.value]"
            },
            "vulnerabilityscansConteinrNamePath": {
              "type": "string",
              "value": "[format('https://{0}.blob.{1}/{2}', variables('storageName'), environment().suffixes.storage, variables('vulnerabilityscansConteinrName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "network",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "adbPrivateSubnetPrefix": {
            "value": "[parameters('adbPrivateSubnetPrefix')]"
          },
          "adbPublicSubnetPrefix": {
            "value": "[parameters('adbPublicSubnetPrefix')]"
          },
          "addressPrefixs": {
            "value": "[parameters('addressPrefixs')]"
          },
          "AllowRDPWhiteListsCIDRRules": {
            "value": "[parameters('WhiteListsCIDRs')]"
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "mlcomputesSubnetPrefix": {
            "value": "[parameters('mlcomputesSubnetPrefix')]"
          },
          "prefix": {
            "value": "[variables('prefix')]"
          },
          "privateEndpointSubnetPrefix": {
            "value": "[parameters('privateEndpointSubnetPrefix')]"
          },
          "runtimeSubnetPrefix": {
            "value": "[parameters('runtimeSubnetPrefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "8549601084987642752"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "AllowRDPWhiteListsCIDRRules": {
              "type": "array"
            },
            "addressPrefixs": {
              "type": "array"
            },
            "runtimeSubnetPrefix": {
              "type": "string"
            },
            "privateEndpointSubnetPrefix": {
              "type": "string"
            },
            "mlcomputesSubnetPrefix": {
              "type": "string"
            },
            "adbPublicSubnetPrefix": {
              "type": "string"
            },
            "adbPrivateSubnetPrefix": {
              "type": "string"
            }
          },
          "variables": {
            "tagJoin": "[union(parameters('tags'), createObject('Group', 'network'))]",
            "adbNsgName": "[format('{0}-adb-nsg-{1}', parameters('prefix'), parameters('env'))]",
            "runtimeNsgName": "[format('{0}-runtime-nsg-{1}', parameters('prefix'), parameters('env'))]",
            "vnetName": "[format('{0}-vnet-{1}', parameters('prefix'), parameters('env'))]",
            "amlNsgName": "[format('{0}-aml-nsg-{1}', parameters('prefix'), parameters('env'))]",
            "privateEndpointSubnet": {
              "name": "privateEndpoints",
              "addressPrefix": "[parameters('privateEndpointSubnetPrefix')]"
            },
            "runtimeSubnet": {
              "name": "runtime",
              "addressPrefix": "[parameters('runtimeSubnetPrefix')]"
            },
            "mlcomputesSubnet": {
              "name": "mlcomputes",
              "addressPrefix": "[parameters('mlcomputesSubnetPrefix')]"
            },
            "adbPublicSubnet": {
              "name": "adb-public-subnet",
              "addressPrefix": "[parameters('adbPublicSubnetPrefix')]"
            },
            "adbPrivateSubnet": {
              "name": "adb-private-subnet",
              "addressPrefix": "[parameters('adbPrivateSubnetPrefix')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-08-01",
              "name": "[variables('adbNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[variables('tagJoin')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-inbound",
                    "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-databricks-webapp",
                    "properties": {
                      "description": "Required for workers communication with Databricks Webapp.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureDatabricks",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-sql",
                    "properties": {
                      "description": "Required for workers communication with Azure SQL services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3306",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 101,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-storage",
                    "properties": {
                      "description": "Required for workers communication with Azure Storage services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 102,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-outbound",
                    "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 103,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-eventhub",
                    "properties": {
                      "description": "Required for worker communication with Azure Eventhub services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9093",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "EventHub",
                      "access": "Allow",
                      "priority": 104,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-08-01",
              "name": "[variables('runtimeNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[variables('tagJoin')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "default-allow-rdp",
                    "properties": {
                      "priority": 1000,
                      "protocol": "Tcp",
                      "destinationPortRange": "3389",
                      "access": "Allow",
                      "direction": "Inbound",
                      "sourcePortRange": "*",
                      "destinationAddressPrefix": "*",
                      "sourceAddressPrefixes": "[parameters('AllowRDPWhiteListsCIDRRules')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2021-08-01",
              "name": "[variables('amlNsgName')]",
              "location": "[parameters('location')]",
              "tags": "[variables('tagJoin')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AzureBatch",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "29876-29877",
                      "sourceAddressPrefix": "BatchNodeManagement",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1040,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "AzureMachineLearning",
                    "properties": {
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "44224",
                      "sourceAddressPrefix": "AzureMachineLearning",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 1050,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "AML",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureMachineLearning",
                      "access": "Allow",
                      "priority": 3850,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "AAD",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureActiveDirectory",
                      "access": "Allow",
                      "priority": 3700,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "ARM",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureResourceManager",
                      "access": "Allow",
                      "priority": 3800,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "ACR",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureContainerRegistry",
                      "access": "Allow",
                      "priority": 3900,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Storage",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 3950,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "DenyInternet",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Internet",
                      "access": "Deny",
                      "priority": 4000,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "AFDFP",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "AzureFrontDoor.FirstParty",
                      "access": "Allow",
                      "priority": 3600,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "https-http",
                    "properties": {
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "sourceAddressPrefix": "*",
                      "destinationAddressPrefix": "Internet",
                      "access": "Allow",
                      "priority": 3980,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [
                        "443",
                        "80"
                      ],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-04-01",
              "name": "[variables('vnetName')]",
              "location": "[parameters('location')]",
              "tags": "[variables('tagJoin')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('addressPrefixs')]"
                },
                "subnets": [
                  {
                    "name": "[variables('runtimeSubnet').name]",
                    "properties": {
                      "addressPrefix": "[variables('runtimeSubnet').addressPrefix]",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Sql",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.Storage",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.KeyVault",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        }
                      ],
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('runtimeNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('mlcomputesSubnet').name]",
                    "properties": {
                      "addressPrefix": "[variables('mlcomputesSubnet').addressPrefix]",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Storage",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.Sql",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.KeyVault",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        }
                      ],
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('amlNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('adbPublicSubnet').name]",
                    "properties": {
                      "addressPrefix": "[variables('adbPublicSubnet').addressPrefix]",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Storage",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.Sql",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.KeyVault",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        }
                      ],
                      "delegations": [
                        {
                          "name": "databricks-del-public",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('adbNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('adbPrivateSubnet').name]",
                    "properties": {
                      "addressPrefix": "[variables('adbPrivateSubnet').addressPrefix]",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.Storage",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.Sql",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        },
                        {
                          "service": "Microsoft.KeyVault",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        }
                      ],
                      "delegations": [
                        {
                          "name": "databricks-del-private",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('adbNsgName'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('privateEndpointSubnet').name]",
                    "properties": {
                      "addressPrefix": "[variables('privateEndpointSubnet').addressPrefix]",
                      "serviceEndpoints": [],
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled"
                    }
                  }
                ],
                "virtualNetworkPeerings": [],
                "enableDdosProtection": false,
                "enableVmProtection": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('adbNsgName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('amlNsgName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('runtimeNsgName'))]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            },
            "mlcomputesSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('mlcomputesSubnet').name)]"
            },
            "runtimeSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('runtimeSubnet').name)]"
            },
            "adbPublicSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('adbPublicSubnet').name)]"
            },
            "adbPrivateSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('adbPrivateSubnet').name)]"
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), variables('privateEndpointSubnet').name)]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "datalake",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "allowSubnetIds": {
            "value": [
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.adbPublicSubnetId.value]",
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.mlcomputesSubnetId.value]",
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.runtimeSubnetId.value]"
            ]
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('prefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "WhiteListsCIDRRules": {
            "value": "[variables('WhiteListsCIDRRules')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "5594465238827203913"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "WhiteListsCIDRRules": {
              "type": "array"
            },
            "allowSubnetIds": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "allowSubnetIdsRules",
                "count": "[length(parameters('allowSubnetIds'))]",
                "input": {
                  "id": "[parameters('allowSubnetIds')[copyIndex('allowSubnetIdsRules')]]",
                  "action": "Allow"
                }
              }
            ],
            "tagJoin": "[union(parameters('tags'), createObject('Group', 'datalakes'))]",
            "RawLakeName": "[format('{0}-raw-{1}', parameters('prefix'), parameters('env'))]",
            "EnCurLakeName": "[format('{0}-encur-{1}', parameters('prefix'), parameters('env'))]",
            "landingRawResourceAccessrules": [
              {
                "tenantId": "[subscription().tenantId]",
                "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', subscription().subscriptionId)]"
              }
            ],
            "encurResourceAccessrules": [
              {
                "tenantId": "[subscription().tenantId]",
                "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.MachineLearningServices/workspaces/*', subscription().subscriptionId)]"
              },
              {
                "tenantId": "[subscription().tenantId]",
                "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', subscription().subscriptionId)]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('RawLakeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "fileSystemNames": {
                    "value": [
                      "10-landing",
                      "20-raw"
                    ]
                  },
                  "isHnsEnabled": {
                    "value": true
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageIPWhiteLists": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "virtualNetworkRules": {
                    "value": "[variables('allowSubnetIdsRules')]"
                  },
                  "storageName": {
                    "value": "[variables('RawLakeName')]"
                  },
                  "storageSKU": {
                    "value": "Standard_RAGRS"
                  },
                  "resourceAccessRules": {
                    "value": "[variables('landingRawResourceAccessrules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "8766346466627536355"
                    }
                  },
                  "parameters": {
                    "storageName": {
                      "type": "string"
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "storageIPWhiteLists": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "isHnsEnabled": {
                      "type": "bool"
                    },
                    "storageSKU": {
                      "type": "string"
                    },
                    "virtualNetworkRules": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "defaultAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot"
                    },
                    "resourceAccessRules": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[parameters('storageSKU')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "[parameters('defaultAccessTier')]",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": true,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": "[parameters('isHnsEnabled')]",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": "[parameters('storageIPWhiteLists')]",
                          "virtualNetworkRules": "[parameters('virtualNetworkRules')]",
                          "resourceAccessRules": "[parameters('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "toCool",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    },
                    "accessRule": {
                      "type": "string",
                      "value": "[format('{0}/providers/Microsoft.MachineLearningServices/workspaces/*', resourceGroup().id)]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('EnCurLakeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "fileSystemNames": {
                    "value": [
                      "30-enrich",
                      "40-curate"
                    ]
                  },
                  "isHnsEnabled": {
                    "value": true
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageIPWhiteLists": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "virtualNetworkRules": {
                    "value": "[variables('allowSubnetIdsRules')]"
                  },
                  "storageName": {
                    "value": "[variables('EnCurLakeName')]"
                  },
                  "storageSKU": {
                    "value": "Standard_ZRS"
                  },
                  "resourceAccessRules": {
                    "value": "[variables('encurResourceAccessrules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "8766346466627536355"
                    }
                  },
                  "parameters": {
                    "storageName": {
                      "type": "string"
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "storageIPWhiteLists": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "isHnsEnabled": {
                      "type": "bool"
                    },
                    "storageSKU": {
                      "type": "string"
                    },
                    "virtualNetworkRules": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "defaultAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot"
                    },
                    "resourceAccessRules": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[parameters('storageSKU')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "[parameters('defaultAccessTier')]",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": true,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": "[parameters('isHnsEnabled')]",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": "[parameters('storageIPWhiteLists')]",
                          "virtualNetworkRules": "[parameters('virtualNetworkRules')]",
                          "resourceAccessRules": "[parameters('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "toCool",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    },
                    "accessRule": {
                      "type": "string",
                      "value": "[format('{0}/providers/Microsoft.MachineLearningServices/workspaces/*', resourceGroup().id)]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "landingRawLakeId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('RawLakeName'))).outputs.storageId.value]"
            },
            "landingRawLakeFileSystemIds": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('RawLakeName'))).outputs.storageFileSystemIds.value]"
            },
            "enCurLakeId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('EnCurLakeName'))).outputs.storageId.value]"
            },
            "enCurLakeFileSystemIds": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('EnCurLakeName'))).outputs.storageFileSystemIds.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "uploads",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "allowSubnetIds": {
            "value": [
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.adbPublicSubnetId.value]",
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.runtimeSubnetId.value]"
            ]
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('prefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "WhiteListsCIDRRules": {
            "value": "[variables('WhiteListsCIDRRules')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "14667242566415313949"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "WhiteListsCIDRRules": {
              "type": "array"
            },
            "allowSubnetIds": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "allowSubnetIdsRules",
                "count": "[length(parameters('allowSubnetIds'))]",
                "input": {
                  "id": "[parameters('allowSubnetIds')[copyIndex('allowSubnetIdsRules')]]",
                  "action": "Allow"
                }
              }
            ],
            "tagJoin": "[union(parameters('tags'), createObject('Group', 'upload'))]",
            "uploadStorageName": "[format('{0}-upst-{1}', parameters('prefix'), parameters('env'))]",
            "upstResourceAccessrules": [
              {
                "tenantId": "[subscription().tenantId]",
                "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', subscription().subscriptionId)]"
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('uploadStorageName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "fileSystemNames": {
                    "value": [
                      "upload001"
                    ]
                  },
                  "isHnsEnabled": {
                    "value": false
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "storageIPWhiteLists": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "virtualNetworkRules": {
                    "value": "[variables('allowSubnetIdsRules')]"
                  },
                  "storageName": {
                    "value": "[variables('uploadStorageName')]"
                  },
                  "storageSKU": {
                    "value": "Standard_LRS"
                  },
                  "resourceAccessRules": {
                    "value": "[variables('upstResourceAccessrules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "8766346466627536355"
                    }
                  },
                  "parameters": {
                    "storageName": {
                      "type": "string"
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "storageIPWhiteLists": {
                      "type": "array"
                    },
                    "location": {
                      "type": "string"
                    },
                    "isHnsEnabled": {
                      "type": "bool"
                    },
                    "storageSKU": {
                      "type": "string"
                    },
                    "virtualNetworkRules": {
                      "type": "array"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "defaultAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot"
                    },
                    "resourceAccessRules": {
                      "type": "array"
                    }
                  },
                  "variables": {
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[parameters('storageSKU')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "[parameters('defaultAccessTier')]",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": true,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": "[parameters('isHnsEnabled')]",
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": "[parameters('storageIPWhiteLists')]",
                          "virtualNetworkRules": "[parameters('virtualNetworkRules')]",
                          "resourceAccessRules": "[parameters('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "toCool",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    },
                    "accessRule": {
                      "type": "string",
                      "value": "[format('{0}/providers/Microsoft.MachineLearningServices/workspaces/*', resourceGroup().id)]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "uploadStorageId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('uploadStorageName'))).outputs.storageId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "appKeyvault",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "allowSubnetIds": {
            "value": [
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.adbPublicSubnetId.value]",
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.mlcomputesSubnetId.value]",
              "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.runtimeSubnetId.value]"
            ]
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('prefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "WhiteListsCIDRRules": {
            "value": "[variables('WhiteListsCIDRRules')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "9504347153217441476"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "WhiteListsCIDRRules": {
              "type": "array"
            },
            "allowSubnetIds": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "allowSubnetIdsRules",
                "count": "[length(parameters('allowSubnetIds'))]",
                "input": {
                  "id": "[parameters('allowSubnetIds')[copyIndex('allowSubnetIdsRules')]]",
                  "action": "Allow"
                }
              }
            ],
            "tagJoin": "[union(parameters('tags'), createObject('Group', 'data apps'))]",
            "keyvaultName": "[format('{0}-appkv-{1}', parameters('prefix'), parameters('env'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('keyvaultName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "keyvaultName": {
                    "value": "[variables('keyvaultName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "keyvaultIPWhiteLists": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "virtualNetworkRules": {
                    "value": "[variables('allowSubnetIdsRules')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "10115677504206974674"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "keyvaultName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "virtualNetworkRules": {
                      "type": "array"
                    },
                    "keyvaultIPWhiteLists": {
                      "type": "array"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[parameters('keyvaultName')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "tenantId": "[subscription().tenantId]",
                        "sku": {
                          "name": "standard",
                          "family": "A"
                        },
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": "[parameters('keyvaultIPWhiteLists')]",
                          "virtualNetworkRules": "[parameters('virtualNetworkRules')]"
                        },
                        "enableRbacAuthorization": true,
                        "enabledForTemplateDeployment": true,
                        "enableSoftDelete": true,
                        "softDeleteRetentionInDays": 90,
                        "enablePurgeProtection": true
                      }
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                    },
                    "keyvaultUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))).vaultUri]"
                    },
                    "keyvaultProperty": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName')))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "keyvaultId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('keyvaultName'))).outputs.keyvaultId.value]"
            },
            "keyvaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('keyvaultName'))).outputs.keyvaultUri.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'network')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "dataApps",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "env": {
            "value": "[parameters('env')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('prefix')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "isNeedDatabricks": {
            "value": "[parameters('isNeedDatabricks')]"
          },
          "customPrivateSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.adbPrivateSubnetId.value]"
          },
          "customPublicSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.adbPublicSubnetId.value]"
          },
          "customVirtualNetworkId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.vnetId.value]"
          },
          "isNeedDataFactory": {
            "value": "[parameters('isNeedDataFactory')]"
          },
          "isNeedSHIRforDataFactory": {
            "value": "[parameters('isNeedSHIRforDataFactory')]"
          },
          "runtimeSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.runtimeSubnetId.value]"
          },
          "VMAdministratorLogin": {
            "value": "[parameters('VMAdministratorLogin')]"
          },
          "VMAdministratorLoginPassword": {
            "value": "[parameters('VMAdministratorLoginPassword')]"
          },
          "vmsku": {
            "value": "[variables('vmsku')]"
          },
          "isNeedMachineLearning": {
            "value": "[parameters('isNeedMachineLearning')]"
          },
          "keyVaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appKeyvault')).outputs.keyvaultId.value]"
          },
          "mlcomputeSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'network')).outputs.mlcomputesSubnetId.value]"
          },
          "WhiteListsCIDRRules": {
            "value": "[variables('WhiteListsCIDRRules')]"
          },
          "isNeedSynapse": {
            "value": "[parameters('isNeedSynapse')]"
          },
          "WhiteListsStartEndIPs": {
            "value": "[parameters('WhiteListsStartEndIPs')]"
          },
          "AllowAzure": {
            "value": "[parameters('AllowAzure')]"
          },
          "sqlAdministratorPassword": {
            "value": "[parameters('sqlAdministratorPassword')]"
          },
          "sqlAdministratorUsername": {
            "value": "[parameters('sqlAdministratorUsername')]"
          },
          "isDLPEnable": {
            "value": "[parameters('isDLPEnable')]"
          },
          "isNeedSqlPool": {
            "value": "[parameters('isNeedSqlPool')]"
          },
          "AdminGroupObjectID": {
            "value": "[parameters('AdminGroupObjectID')]"
          },
          "AdminGroupName": {
            "value": "[parameters('AdminGroupName')]"
          },
          "sqlPoolBackupType": {
            "value": "[parameters('sqlPoolBackupType')]"
          },
          "sqlPooldwu": {
            "value": "[parameters('sqlPooldwu')]"
          },
          "isNeedSHIRforSynepse": {
            "value": "[parameters('isNeedSHIRforSynepse')]"
          },
          "isNeedVMforOnPremiseDataGateway": {
            "value": "[parameters('isNeedVMforOnPremiseDataGateway')]"
          },
          "isNeedSQL": {
            "value": "[parameters('isNeedSQL')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "9481331518322284499"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "env": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "isNeedDatabricks": {
              "type": "bool"
            },
            "customPrivateSubnetId": {
              "type": "string"
            },
            "customPublicSubnetId": {
              "type": "string"
            },
            "customVirtualNetworkId": {
              "type": "string"
            },
            "isNeedDataFactory": {
              "type": "bool"
            },
            "isNeedSHIRforDataFactory": {
              "type": "bool"
            },
            "runtimeSubnetId": {
              "type": "string"
            },
            "vmsku": {
              "type": "string"
            },
            "VMAdministratorLogin": {
              "type": "string"
            },
            "VMAdministratorLoginPassword": {
              "type": "secureString",
              "minLength": 12
            },
            "isNeedMachineLearning": {
              "type": "bool"
            },
            "WhiteListsCIDRRules": {
              "type": "array"
            },
            "mlcomputeSubnetId": {
              "type": "string"
            },
            "keyVaultId": {
              "type": "string"
            },
            "isNeedSynapse": {
              "type": "bool"
            },
            "sqlAdministratorUsername": {
              "type": "string"
            },
            "sqlAdministratorPassword": {
              "type": "secureString"
            },
            "AdminGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "AdminGroupObjectID": {
              "type": "string"
            },
            "WhiteListsStartEndIPs": {
              "type": "array"
            },
            "AllowAzure": {
              "type": "bool"
            },
            "isDLPEnable": {
              "type": "bool"
            },
            "isNeedSqlPool": {
              "type": "bool"
            },
            "sqlPoolBackupType": {
              "type": "string"
            },
            "sqlPooldwu": {
              "type": "string"
            },
            "isNeedSHIRforSynepse": {
              "type": "bool"
            },
            "isNeedSQL": {
              "type": "bool"
            },
            "isNeedVMforOnPremiseDataGateway": {
              "type": "bool"
            }
          },
          "variables": {
            "tagJoin": "[union(parameters('tags'), createObject('Group', 'data apps'))]",
            "databricksName": "[format('{0}-adb-{1}', parameters('prefix'), parameters('env'))]",
            "datafactoryName": "[format('{0}-adf-{1}', parameters('prefix'), parameters('env'))]",
            "shirName": "shir001",
            "shirPublicIPAddressName": "[format('{0}-ir-ip-{1}', parameters('prefix'), parameters('env'))]",
            "shirDnsLabal": "[replace(format('{0}ir{1}', parameters('prefix'), parameters('env')), '-', '')]",
            "shirNicName": "[format('{0}-ir-nic-{1}', parameters('prefix'), parameters('env'))]",
            "shirVMName": "[replace(format('{0}ir{1}', parameters('prefix'), parameters('env')), '-', '')]",
            "machinelearningName": "[format('{0}-ml-{1}', parameters('prefix'), parameters('env'))]",
            "applicationinsightName": "[format('{0}-mlai-{1}', parameters('prefix'), parameters('env'))]",
            "containerRegistryName": "[format('{0}-mlcr-{1}', parameters('prefix'), parameters('env'))]",
            "amlStorageName": "[format('{0}-mlst-{1}', parameters('prefix'), parameters('env'))]",
            "synapseName": "[format('{0}-syn-{1}', parameters('prefix'), parameters('env'))]",
            "synapseStorageName": "[format('{0}-ws-{1}', parameters('prefix'), parameters('env'))]",
            "synshirName": "shir001",
            "synshirPublicIPAddressName": "[format('{0}-sir-ip-{1}', parameters('prefix'), parameters('env'))]",
            "synshirDnsLabal": "[replace(format('{0}sir{1}', parameters('prefix'), parameters('env')), '-', '')]",
            "synshirNicName": "[format('{0}-sir-nic-{1}', parameters('prefix'), parameters('env'))]",
            "synshirVMName": "[replace(format('{0}sir{1}', parameters('prefix'), parameters('env')), '-', '')]",
            "sqlServerName": "[format('{0}-sql-{1}', parameters('prefix'), parameters('env'))]",
            "sqlDatabaseName": "[format('{0}-sqldb-{1}', parameters('prefix'), parameters('env'))]",
            "powerbiGWPublicIPAddressName": "[format('{0}-pbi-ip-{1}', parameters('prefix'), parameters('env'))]",
            "powerbiGWDnsLabal": "[replace(format('{0}pbi{1}', parameters('prefix'), parameters('env')), '-', '')]",
            "powerbiGWNicName": "[format('{0}-pbi-nic-{1}', parameters('prefix'), parameters('env'))]",
            "powerbiGWVMName": "[replace(format('{0}pbi{1}', parameters('prefix'), parameters('env')), '-', '')]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('isNeedDatabricks'), true())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('databricksName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "customPrivateSubnetName": {
                    "value": "[last(split(parameters('customPrivateSubnetId'), '/'))]"
                  },
                  "customPublicSubnetName": {
                    "value": "[last(split(parameters('customPublicSubnetId'), '/'))]"
                  },
                  "customVirtualNetworkId": {
                    "value": "[parameters('customVirtualNetworkId')]"
                  },
                  "databricksWorkspaceName": {
                    "value": "[variables('databricksName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "18394413311333816337"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "databricksWorkspaceName": {
                      "type": "string"
                    },
                    "customVirtualNetworkId": {
                      "type": "string"
                    },
                    "customPublicSubnetName": {
                      "type": "string"
                    },
                    "customPrivateSubnetName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "managedResourceGroupId": "[format('{0}/resourceGroups/databricks-rg-{1}-{2}', subscription().id, parameters('databricksWorkspaceName'), uniqueString(parameters('databricksWorkspaceName'), resourceGroup().id))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Databricks/workspaces",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('databricksWorkspaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "premium"
                      },
                      "properties": {
                        "managedResourceGroupId": "[variables('managedResourceGroupId')]",
                        "parameters": {
                          "enableNoPublicIp": {
                            "value": true
                          },
                          "customVirtualNetworkId": {
                            "value": "[parameters('customVirtualNetworkId')]"
                          },
                          "customPublicSubnetName": {
                            "value": "[parameters('customPublicSubnetName')]"
                          },
                          "customPrivateSubnetName": {
                            "value": "[parameters('customPrivateSubnetName')]"
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "databricksWorkspaceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Databricks/workspaces', parameters('databricksWorkspaceName'))]"
                    },
                    "databricksWorkspaceUrl": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('databricksWorkspaceName'))).workspaceUrl]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('isNeedDataFactory'), true())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[variables('datafactoryName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactoryName": {
                    "value": "[variables('datafactoryName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "selfhostedIRName": {
                    "value": "[variables('shirName')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "isNeedSHIRforDataFactory": {
                    "value": "[parameters('isNeedSHIRforDataFactory')]"
                  },
                  "shirDnsLabal": {
                    "value": "[variables('shirDnsLabal')]"
                  },
                  "shirNicName": {
                    "value": "[variables('shirNicName')]"
                  },
                  "shirPublicIPAddressName": {
                    "value": "[variables('shirPublicIPAddressName')]"
                  },
                  "shirSubnetId": {
                    "value": "[parameters('runtimeSubnetId')]"
                  },
                  "shirVMName": {
                    "value": "[variables('shirVMName')]"
                  },
                  "VMAdministratorLogin": {
                    "value": "[parameters('VMAdministratorLogin')]"
                  },
                  "VMAdministratorLoginPassword": {
                    "value": "[parameters('VMAdministratorLoginPassword')]"
                  },
                  "vmsku": {
                    "value": "[parameters('vmsku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "772074675175456630"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "datafactoryName": {
                      "type": "string"
                    },
                    "isNeedSHIRforDataFactory": {
                      "type": "bool"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "selfhostedIRName": {
                      "type": "string"
                    },
                    "shirSubnetId": {
                      "type": "string"
                    },
                    "vmsku": {
                      "type": "string"
                    },
                    "VMAdministratorLogin": {
                      "type": "string"
                    },
                    "VMAdministratorLoginPassword": {
                      "type": "secureString",
                      "minLength": 12
                    },
                    "shirPublicIPAddressName": {
                      "type": "string"
                    },
                    "shirDnsLabal": {
                      "type": "string"
                    },
                    "shirNicName": {
                      "type": "string"
                    },
                    "shirVMName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "datafactoryDefaultManagedVnetIntegrationRuntimeName": "AutoResolveIntegrationRuntime"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DataFactory/factories",
                      "apiVersion": "2018-06-01",
                      "name": "[parameters('datafactoryName')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "SystemAssigned"
                      }
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                      "properties": {
                        "type": "Managed",
                        "managedVirtualNetwork": {
                          "type": "ManagedVirtualNetworkReference",
                          "referenceName": "default"
                        },
                        "typeProperties": {
                          "computeProperties": {
                            "location": "AutoResolve"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('isNeedSHIRforDataFactory'), true())]",
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), parameters('selfhostedIRName'))]",
                      "properties": {
                        "type": "SelfHosted"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('isNeedSHIRforDataFactory'), true())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "runtime",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPassword": {
                            "value": "[parameters('VMAdministratorLoginPassword')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('VMAdministratorLogin')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "nicName": {
                            "value": "[parameters('shirNicName')]"
                          },
                          "publicIpName": {
                            "value": "[parameters('shirPublicIPAddressName')]"
                          },
                          "subnetId": {
                            "value": "[parameters('shirSubnetId')]"
                          },
                          "vmName": {
                            "value": "[parameters('shirVMName')]"
                          },
                          "vmSize": {
                            "value": "[parameters('vmsku')]"
                          },
                          "dnsLabelPrefix": {
                            "value": "[parameters('shirDnsLabal')]"
                          },
                          "isSHIRMode": {
                            "value": true
                          },
                          "publicIPAllocationMethod": {
                            "value": "Dynamic"
                          },
                          "publicIpSku": {
                            "value": "Basic"
                          },
                          "OSVersion": {
                            "value": "2019-Datacenter"
                          },
                          "datafactoryIntegrationRuntimeAuthKey": {
                            "value": "[if(equals(parameters('isNeedSHIRforDataFactory'), true()), listAuthKeys(resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), parameters('selfhostedIRName')), '2018-06-01').authKey1, '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "410745011675740693"
                            }
                          },
                          "parameters": {
                            "adminUsername": {
                              "type": "string",
                              "metadata": {
                                "description": "Username for the Virtual Machine."
                              }
                            },
                            "adminPassword": {
                              "type": "secureString",
                              "minLength": 12,
                              "metadata": {
                                "description": "Password for the Virtual Machine."
                              }
                            },
                            "dnsLabelPrefix": {
                              "type": "string",
                              "defaultValue": "[toLower(format('{0}-{1}', parameters('vmName'), uniqueString(resourceGroup().id, parameters('vmName'))))]",
                              "metadata": {
                                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "publicIpName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Dynamic",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Allocation method for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "publicIpSku": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "SKU for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "OSVersion": {
                              "type": "string",
                              "defaultValue": "2019-datacenter-gensecond",
                              "allowedValues": [
                                "2019-datacenter-gensecond",
                                "2019-datacenter-core-gensecond",
                                "2019-datacenter-core-smalldisk-gensecond",
                                "2019-datacenter-core-with-containers-gensecond",
                                "2019-datacenter-core-with-containers-smalldisk-g2",
                                "2019-datacenter-smalldisk-gensecond",
                                "2019-datacenter-with-containers-gensecond",
                                "2019-datacenter-with-containers-smalldisk-g2",
                                "2016-datacenter-gensecond",
                                "2019-Datacenter"
                              ],
                              "metadata": {
                                "description": "The Windows version for the VM. This will pick a fully patched Gen2 image of this given Windows version."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Size of the virtual machine."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "vmName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the virtual machine."
                              }
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "nicName": {
                              "type": "string"
                            },
                            "isSHIRMode": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "datafactoryIntegrationRuntimeAuthKey": {
                              "type": "secureString",
                              "defaultValue": ""
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "$fxv#0": "IyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4KIyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgojIERlZmluZSBzY3JpcHQgYXJndW1lbnRzCltDbWRsZXRCaW5kaW5nKCldCnBhcmFtICgKCVtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQoJW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KCVtTdHJpbmddCgkkZ2F0ZXdheUtleSwKCglbUGFyYW1ldGVyKERvbnRTaG93KV0KCVtTdHJpbmddCgkkZ2F0ZXdheVVyaSA9ICJodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9saW5raWQ9ODM5ODIyIgopCgojIERlZmluZSB2YXJpYWJsZXMKJGdhdGV3YXlQYXRoID0gIiRQV0RcZ2F0ZXdheS5tc2kiCiRsb2dMb2MgPSAiJGVudjpTeXN0ZW1Ecml2ZVxXaW5kb3dzQXp1cmVcTG9nc1xQbHVnaW5zXE1pY3Jvc29mdC5Db21wdXRlLkN1c3RvbVNjcmlwdEV4dGVuc2lvblwiCiRsb2dQYXRoID0gIiRsb2dMb2NcdHJhY2Vsb2cubG9nIgoKZnVuY3Rpb24gTmV3LUVycm9yKFtzdHJpbmddICRtc2cpIHsKCXRyeSB7CgkJdGhyb3cgJG1zZwoJfQoJY2F0Y2ggewoJCSRzdGFjayA9ICRfLlNjcmlwdFN0YWNrVHJhY2UKCQlUcmFjZS1Mb2cgIkRNRFRUUCBpcyBmYWlsZWQ6ICRtc2dgblN0YWNrOmBuJHN0YWNrIgoJfQoJdGhyb3cgJG1zZwp9CgpmdW5jdGlvbiBUcmFjZS1Mb2coW3N0cmluZ10gJG1zZykgewoJJG5vdyA9IEdldC1EYXRlIC1Gb3JtYXQgInl5eXktTU0tZGQgSEg6bW06c3MiCgl0cnkgewoJCSIke25vd30gJG1zZ2BuIiB8IE91dC1GaWxlICRsb2dQYXRoIC1BcHBlbmQKCX0KCWNhdGNoIHsKCQlXcml0ZS1FcnJvciAiRXJyb3Igd2hlbiB3cml0aW5nIHRyYWNlIGxvZyIKCX0KfQoKZnVuY3Rpb24gSW52b2tlLVByb2Nlc3MoW3N0cmluZ10gJHByb2Nlc3MsIFtzdHJpbmddICRhcmd1bWVudHMpIHsKCVdyaXRlLVZlcmJvc2UgIlJ1bi1Qcm9jZXNzOiAkcHJvY2VzcyAkYXJndW1lbnRzIgoKCSRlcnJvckZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5lcnIiCgkkb3V0RmlsZSA9ICIkZW52OnRtcFx0bXAkcGlkLm91dCIKCSIiIHwgT3V0LUZpbGUgJG91dEZpbGUKCSIiIHwgT3V0LUZpbGUgJGVycm9yRmlsZQoKCSRlcnJWYXJpYWJsZSA9ICIiCgoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRhcmd1bWVudHMpKSB7CgkJJHByb2MgPSBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkcHJvY2VzcyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGAKCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlCgl9CgllbHNlIHsKCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50cyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGAKCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlCgl9CgoJJGVyckNvbnRlbnQgPSBbc3RyaW5nXSAoR2V0LUNvbnRlbnQgLVBhdGggJGVycm9yRmlsZSAtRGVsaW1pdGVyICIhISFEb2VzTm90RXhpc3QhISEiKQoJJG91dENvbnRlbnQgPSBbc3RyaW5nXSAoR2V0LUNvbnRlbnQgLVBhdGggJG91dEZpbGUgLURlbGltaXRlciAiISEhRG9lc05vdEV4aXN0ISEhIikKCglSZW1vdmUtSXRlbSAkZXJyb3JGaWxlCglSZW1vdmUtSXRlbSAkb3V0RmlsZQoKCWlmICgkcHJvYy5FeGl0Q29kZSAtbmUgMCAtb3IgJGVyclZhcmlhYmxlIC1uZSAiIikgewoJCU5ldy1FcnJvciAiRmFpbGVkIHRvIHJ1biBwcm9jZXNzOiBleGl0Q29kZT0kKCRwcm9jLkV4aXRDb2RlKSwgZXJyVmFyaWFibGU9JGVyclZhcmlhYmxlLCBlcnJDb250ZW50PSRlcnJDb250ZW50LCBvdXRDb250ZW50PSRvdXRDb250ZW50LiIKCX0KCglUcmFjZS1Mb2cgIlJ1bi1Qcm9jZXNzOiBFeGl0Q29kZT0kKCRwcm9jLkV4aXRDb2RlKSwgb3V0cHV0PSRvdXRDb250ZW50IgoKCWlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkb3V0Q29udGVudCkpIHsKCQlyZXR1cm4gJG91dENvbnRlbnQKCX0KCglyZXR1cm4gJG91dENvbnRlbnQuVHJpbSgpCn0KCmZ1bmN0aW9uIEdldC1HYXRld2F5KFtzdHJpbmddICR1cmwsIFtzdHJpbmddICRnYXRld2F5UGF0aCkgewoJdHJ5IHsKCQkkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gIlN0b3AiOwoJCSRjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50CgkJJGNsaWVudC5Eb3dubG9hZEZpbGUoJHVybCwgJGdhdGV3YXlQYXRoKQoJCVRyYWNlLUxvZyAiRG93bmxvYWQgZ2F0ZXdheSBzdWNjZXNzZnVsbHkuIEdhdGV3YXkgbG9jOiAke2dhdGV3YXlQYXRofSIKCX0KCWNhdGNoIHsKCQlUcmFjZS1Mb2cgIkZhaWwgdG8gZG93bmxvYWQgZ2F0ZXdheSBtc2kiCgkJVHJhY2UtTG9nICRfLkV4Y2VwdGlvbi5Ub1N0cmluZygpCgkJdGhyb3cKCX0KfQoKZnVuY3Rpb24gSW5zdGFsbC1HYXRld2F5KFtzdHJpbmddICRnYXRld2F5UGF0aCkgewoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRnYXRld2F5UGF0aCkpIHsKCQlOZXctRXJyb3IgIkdhdGV3YXkgcGF0aCBpcyBub3Qgc3BlY2lmaWVkIgoJfQoJaWYgKCEoVGVzdC1QYXRoIC1QYXRoICRnYXRld2F5UGF0aCkpIHsKCQlOZXctRXJyb3IgIkludmFsaWQgZ2F0ZXdheSBwYXRoOiAke2dhdGV3YXlQYXRofSIKCX0KCVRyYWNlLUxvZyAiU3RhcnQgR2F0ZXdheSBpbnN0YWxsYXRpb24iCglJbnZva2UtUHJvY2VzcyAibXNpZXhlYy5leGUiICIvaSBnYXRld2F5Lm1zaSBJTlNUQUxMVFlQRT1BenVyZVRlbXBsYXRlIC9xdWlldCAvbm9yZXN0YXJ0IgoJU3RhcnQtU2xlZXAgLVNlY29uZHMgMzAKCVRyYWNlLUxvZyAiSW5zdGFsbGF0aW9uIG9mIGdhdGV3YXkgaXMgc3VjY2Vzc2Z1bCIKfQoKZnVuY3Rpb24gR2V0LVJlZ2lzdHJ5UHJvcGVydHkoW3N0cmluZ10gJGtleVBhdGgsIFtzdHJpbmddICRwcm9wZXJ0eSkgewoJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogR2V0ICRwcm9wZXJ0eSBmcm9tICRrZXlQYXRoIgoJaWYgKCEgKFRlc3QtUGF0aCAka2V5UGF0aCkpIHsKCQlUcmFjZS1Mb2cgIkdldC1SZWdpc3RyeVByb3BlcnR5OiAka2V5UGF0aCBkb2VzIG5vdCBleGlzdCIKCX0KCgkka2V5UmVnID0gR2V0LUl0ZW0gJGtleVBhdGgKCWlmICghICgka2V5UmVnLlByb3BlcnR5IC1jb250YWlucyAkcHJvcGVydHkpKSB7CgkJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogJHByb3BlcnR5IGRvZXMgbm90IGV4aXN0IgoJCXJldHVybiAiIgoJfQoJcmV0dXJuICRrZXlSZWcuR2V0VmFsdWUoJHByb3BlcnR5KQp9CgpmdW5jdGlvbiBHZXQtSW5zdGFsbGVkRmlsZVBhdGgoKSB7CgkkZmlsZVBhdGggPSBHZXQtUmVnaXN0cnlQcm9wZXJ0eSAiaGtsbTpcU29mdHdhcmVcTWljcm9zb2Z0XERhdGFUcmFuc2ZlclxEYXRhTWFuYWdlbWVudEdhdGV3YXlcQ29uZmlndXJhdGlvbk1hbmFnZXIiICJEaWFjbWRQYXRoIgoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRmaWxlUGF0aCkpIHsKCQlOZXctRXJyb3IgIkdldC1JbnN0YWxsZWRGaWxlUGF0aDogQ2Fubm90IGZpbmQgaW5zdGFsbGVkIEZpbGUgUGF0aCIKCX0KCVRyYWNlLUxvZyAiR2F0ZXdheSBpbnN0YWxsYXRpb24gZmlsZTogJGZpbGVQYXRoIgoJcmV0dXJuICRmaWxlUGF0aAp9CgpmdW5jdGlvbiBSZWdpc3Rlci1HYXRld2F5KFtzdHJpbmddICRpbnN0YW5jZUtleSkgewoJVHJhY2UtTG9nICJSZWdpc3RlciBBZ2VudCIKCSRmaWxlUGF0aCA9IEdldC1JbnN0YWxsZWRGaWxlUGF0aAoJSW52b2tlLVByb2Nlc3MgJGZpbGVQYXRoICItZXJhIDgwNjAiCglJbnZva2UtUHJvY2VzcyAkZmlsZVBhdGggIi1rICRpbnN0YW5jZUtleSIKCVRyYWNlLUxvZyAiQWdlbnQgcmVnaXN0cmF0aW9uIGlzIHN1Y2Nlc3NmdWwhIgp9CgojIEluaXQgbG9nIHNldHRpbmdzCmlmICghKFRlc3QtUGF0aCgkbG9nTG9jKSkpIHsKCU5ldy1JdGVtIC1QYXRoICRsb2dMb2MgLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UKfQoiU3RhcnQgdG8gZXhjdXRlIGdhdGV3YXlJbnN0YWxsLnBzMS4gYG4iIHwgT3V0LUZpbGUgJGxvZ1BhdGgKVHJhY2UtTG9nICJMb2cgZmlsZTogJGxvZ0xvYyIKVHJhY2UtTG9nICJHYXRld2F5IGRvd25sb2FkIGZ3IGxpbms6ICR7Z2F0ZXdheVVyaX0iClRyYWNlLUxvZyAiR2F0ZXdheSBkb3dubG9hZCBsb2NhdGlvbjogJHtnYXRld2F5UGF0aH0iCgpHZXQtR2F0ZXdheSAkZ2F0ZXdheVVyaSAkZ2F0ZXdheVBhdGgKSW5zdGFsbC1HYXRld2F5ICRnYXRld2F5UGF0aApSZWdpc3Rlci1HYXRld2F5ICRnYXRld2F5S2V5",
                            "osProfile": "[if(equals(parameters('isSHIRMode'), true()), createObject('computerName', parameters('vmName'), 'adminUsername', parameters('adminUsername'), 'adminPassword', parameters('adminPassword'), 'customData', variables('$fxv#0')), createObject('computerName', parameters('vmName'), 'adminUsername', parameters('adminUsername'), 'adminPassword', parameters('adminPassword')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('publicIpName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('publicIpSku')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "dnsSettings": {
                                  "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('nicName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "publicIPAddress": {
                                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                                      },
                                      "subnet": {
                                        "id": "[parameters('subnetId')]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('vmName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "osProfile": "[variables('osProfile')]",
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": true
                                  }
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "MicrosoftWindowsServer",
                                    "offer": "WindowsServer",
                                    "sku": "[parameters('OSVersion')]",
                                    "version": "latest"
                                  },
                                  "osDisk": {
                                    "createOption": "FromImage",
                                    "managedDisk": {
                                      "storageAccountType": "StandardSSD_LRS"
                                    }
                                  },
                                  "dataDisks": [
                                    {
                                      "diskSizeGB": 1023,
                                      "lun": 0,
                                      "createOption": "Empty"
                                    }
                                  ]
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('isSHIRMode')]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-11-01",
                              "name": "[format('{0}/{1}', parameters('vmName'), 'installGW')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.7",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "fileUris": []
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"cp c:/azuredata/customdata.bin c:/azuredata/installSHIRGateway.ps1; c:/azuredata/installSHIRGateway.ps1 -gatewayKey \"{0}\"', parameters('datafactoryIntegrationRuntimeAuthKey'))]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "hostname": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))).dnsSettings.fqdn]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), parameters('selfhostedIRName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "datafactoryPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName')), '2018-06-01', 'full').identity.principalId]"
                    },
                    "datafactoryId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('isNeedMachineLearning'), true())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "machinelearning",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "WorkspaceName": {
                    "value": "[variables('machinelearningName')]"
                  },
                  "amlStorageName": {
                    "value": "[variables('amlStorageName')]"
                  },
                  "mlcomputeSubnetId": {
                    "value": "[parameters('mlcomputeSubnetId')]"
                  },
                  "databricksSubnetId": {
                    "value": "[parameters('customPublicSubnetId')]"
                  },
                  "storageIPWhiteLists": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "applicationinsightName": {
                    "value": "[variables('applicationinsightName')]"
                  },
                  "containerRegistryName": {
                    "value": "[variables('containerRegistryName')]"
                  },
                  "keyVaultId": {
                    "value": "[parameters('keyVaultId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "10278263843911115033"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "WorkspaceName": {
                      "type": "string"
                    },
                    "keyVaultId": {
                      "type": "string"
                    },
                    "amlStorageName": {
                      "type": "string"
                    },
                    "storageIPWhiteLists": {
                      "type": "array"
                    },
                    "mlcomputeSubnetId": {
                      "type": "string"
                    },
                    "databricksSubnetId": {
                      "type": "string"
                    },
                    "applicationinsightName": {
                      "type": "string"
                    },
                    "containerRegistryName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "resourceAccessRules": [
                      {
                        "tenantId": "[subscription().tenantId]",
                        "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.MachineLearningServices/workspaces/*', subscription().subscriptionId)]"
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.MachineLearningServices/workspaces",
                      "apiVersion": "2022-01-01-preview",
                      "name": "[parameters('WorkspaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "friendlyName": "[parameters('WorkspaceName')]",
                        "keyVault": "[parameters('keyVaultId')]",
                        "applicationInsights": "[reference(resourceId('Microsoft.Resources/deployments', parameters('applicationinsightName'))).outputs.applicationinsightId.value]",
                        "containerRegistry": "[reference(resourceId('Microsoft.Resources/deployments', parameters('containerRegistryName'))).outputs.containerRegistryId.value]",
                        "storageAccount": "[reference(resourceId('Microsoft.Resources/deployments', parameters('amlStorageName'))).outputs.storageId.value]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', parameters('applicationinsightName'))]",
                        "[resourceId('Microsoft.Resources/deployments', parameters('containerRegistryName'))]",
                        "[resourceId('Microsoft.Resources/deployments', parameters('amlStorageName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('amlStorageName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "fileSystemNames": {
                            "value": []
                          },
                          "isHnsEnabled": {
                            "value": false
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "storageIPWhiteLists": {
                            "value": "[parameters('storageIPWhiteLists')]"
                          },
                          "storageName": {
                            "value": "[parameters('amlStorageName')]"
                          },
                          "storageSKU": {
                            "value": "Standard_RAGRS"
                          },
                          "virtualNetworkRules": {
                            "value": [
                              {
                                "id": "[parameters('mlcomputeSubnetId')]",
                                "action": "Allow"
                              },
                              {
                                "id": "[parameters('databricksSubnetId')]",
                                "action": "Allow"
                              }
                            ]
                          },
                          "resourceAccessRules": {
                            "value": "[variables('resourceAccessRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "8766346466627536355"
                            }
                          },
                          "parameters": {
                            "storageName": {
                              "type": "string"
                            },
                            "fileSystemNames": {
                              "type": "array"
                            },
                            "storageIPWhiteLists": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "isHnsEnabled": {
                              "type": "bool"
                            },
                            "storageSKU": {
                              "type": "string"
                            },
                            "virtualNetworkRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "defaultAccessTier": {
                              "type": "string",
                              "defaultValue": "Hot"
                            },
                            "resourceAccessRules": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2021-02-01",
                              "name": "[variables('storageNameCleaned')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "sku": {
                                "name": "[parameters('storageSKU')]"
                              },
                              "kind": "StorageV2",
                              "properties": {
                                "accessTier": "[parameters('defaultAccessTier')]",
                                "allowBlobPublicAccess": false,
                                "allowSharedKeyAccess": true,
                                "encryption": {
                                  "keySource": "Microsoft.Storage",
                                  "services": {
                                    "blob": {
                                      "enabled": true,
                                      "keyType": "Account"
                                    },
                                    "file": {
                                      "enabled": true,
                                      "keyType": "Account"
                                    },
                                    "queue": {
                                      "enabled": true,
                                      "keyType": "Service"
                                    },
                                    "table": {
                                      "enabled": true,
                                      "keyType": "Service"
                                    }
                                  }
                                },
                                "isHnsEnabled": "[parameters('isHnsEnabled')]",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": "[parameters('storageIPWhiteLists')]",
                                  "virtualNetworkRules": "[parameters('virtualNetworkRules')]",
                                  "resourceAccessRules": "[parameters('resourceAccessRules')]"
                                },
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                              "properties": {},
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "storageFileSystems",
                                "count": "[length(parameters('fileSystemNames'))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                              "properties": {
                                "publicAccess": "None",
                                "metadata": {}
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                              "properties": {
                                "policy": {
                                  "rules": [
                                    {
                                      "enabled": true,
                                      "name": "toCool",
                                      "type": "Lifecycle",
                                      "definition": {
                                        "actions": {
                                          "baseBlob": {
                                            "tierToCool": {
                                              "daysAfterModificationGreaterThan": 90
                                            }
                                          }
                                        },
                                        "filters": {
                                          "blobTypes": [
                                            "blockBlob"
                                          ],
                                          "prefixMatch": []
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "storageId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                            },
                            "storageFileSystemIds": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('fileSystemNames'))]",
                                "input": {
                                  "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                                }
                              }
                            },
                            "accessRule": {
                              "type": "string",
                              "value": "[format('{0}/providers/Microsoft.MachineLearningServices/workspaces/*', resourceGroup().id)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('applicationinsightName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "applicationinsightName": {
                            "value": "[parameters('applicationinsightName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "11402544538566047070"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "applicationinsightName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Insights/components",
                              "apiVersion": "2015-05-01",
                              "name": "[parameters('applicationinsightName')]",
                              "tags": "[parameters('tags')]",
                              "location": "[if(or(equals(parameters('location'), 'eastus2'), equals(parameters('location'), 'westcentralus')), 'southcentralus', parameters('location'))]",
                              "kind": "web",
                              "properties": {
                                "Application_Type": "web"
                              }
                            }
                          ],
                          "outputs": {
                            "applicationinsightId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Insights/components', parameters('applicationinsightName'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('containerRegistryName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "568239531857923356"
                            }
                          },
                          "parameters": {
                            "location": {
                              "type": "string"
                            },
                            "containerRegistryName": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "containerRegistryNameCleaned": "[replace(parameters('containerRegistryName'), '-', '')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2017-10-01",
                              "name": "[variables('containerRegistryNameCleaned')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "Standard"
                              },
                              "properties": {
                                "adminUserEnabled": true
                              }
                            }
                          ],
                          "outputs": {
                            "containerRegistryId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryNameCleaned'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "machinelearningWorkspaceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('WorkspaceName'))]"
                    },
                    "containerRegistryId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('containerRegistryName'))).outputs.containerRegistryId.value]"
                    },
                    "mlstorageId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('amlStorageName'))).outputs.storageId.value]"
                    },
                    "machinelearningPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('WorkspaceName')), '2022-01-01-preview', 'full').identity.principalId]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('isNeedSynapse'), true())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "synapse",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "synapseDefaultStorageAccountName": {
                    "value": "[variables('synapseStorageName')]"
                  },
                  "allowSubnetIds": {
                    "value": [
                      "[parameters('mlcomputeSubnetId')]",
                      "[parameters('customPublicSubnetId')]",
                      "[parameters('runtimeSubnetId')]"
                    ]
                  },
                  "WhiteListsCIDRRules": {
                    "value": "[parameters('WhiteListsCIDRRules')]"
                  },
                  "synapseName": {
                    "value": "[variables('synapseName')]"
                  },
                  "AllowAzure": {
                    "value": "[parameters('AllowAzure')]"
                  },
                  "WhiteListsStartEndIPs": {
                    "value": "[parameters('WhiteListsStartEndIPs')]"
                  },
                  "administratorUsername": {
                    "value": "[parameters('sqlAdministratorUsername')]"
                  },
                  "administratorPassword": {
                    "value": "[parameters('sqlAdministratorPassword')]"
                  },
                  "isDLPEnable": {
                    "value": "[parameters('isDLPEnable')]"
                  },
                  "isNeedSqlPool": {
                    "value": "[parameters('isNeedSqlPool')]"
                  },
                  "sqlPoolBackupType": {
                    "value": "[parameters('sqlPoolBackupType')]"
                  },
                  "sqlPooldwu": {
                    "value": "[parameters('sqlPooldwu')]"
                  },
                  "synapseSqlAdminGroupName": {
                    "value": "[parameters('AdminGroupName')]"
                  },
                  "synapseSqlAdminGroupObjectID": {
                    "value": "[parameters('AdminGroupObjectID')]"
                  },
                  "isNeedSHIRforSynepse": {
                    "value": "[parameters('isNeedSHIRforSynepse')]"
                  },
                  "selfhostedIRName": {
                    "value": "[variables('synshirName')]"
                  },
                  "shirDnsLabal": {
                    "value": "[variables('synshirDnsLabal')]"
                  },
                  "shirNicName": {
                    "value": "[variables('synshirNicName')]"
                  },
                  "shirPublicIPAddressName": {
                    "value": "[variables('synshirPublicIPAddressName')]"
                  },
                  "shirSubnetId": {
                    "value": "[parameters('runtimeSubnetId')]"
                  },
                  "shirVMName": {
                    "value": "[variables('synshirVMName')]"
                  },
                  "VMAdministratorLogin": {
                    "value": "[parameters('VMAdministratorLogin')]"
                  },
                  "VMAdministratorLoginPassword": {
                    "value": "[parameters('VMAdministratorLoginPassword')]"
                  },
                  "vmsku": {
                    "value": "[parameters('vmsku')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "3174388959657701331"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "synapseDefaultStorageAccountName": {
                      "type": "string"
                    },
                    "WhiteListsCIDRRules": {
                      "type": "array"
                    },
                    "allowSubnetIds": {
                      "type": "array"
                    },
                    "synapseName": {
                      "type": "string"
                    },
                    "administratorUsername": {
                      "type": "string",
                      "defaultValue": "sqladmin"
                    },
                    "administratorPassword": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "AllowAzure": {
                      "type": "bool",
                      "defaultValue": true
                    },
                    "WhiteListsStartEndIPs": {
                      "type": "array"
                    },
                    "synapseSqlAdminGroupName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "synapseSqlAdminGroupObjectID": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "isDLPEnable": {
                      "type": "bool"
                    },
                    "isNeedSqlPool": {
                      "type": "bool"
                    },
                    "sqlPoolBackupType": {
                      "type": "string"
                    },
                    "sqlPooldwu": {
                      "type": "string",
                      "defaultValue": "dw100"
                    },
                    "isNeedSHIRforSynepse": {
                      "type": "bool"
                    },
                    "selfhostedIRName": {
                      "type": "string"
                    },
                    "shirSubnetId": {
                      "type": "string"
                    },
                    "vmsku": {
                      "type": "string"
                    },
                    "VMAdministratorLogin": {
                      "type": "string"
                    },
                    "VMAdministratorLoginPassword": {
                      "type": "secureString",
                      "minLength": 12
                    },
                    "shirPublicIPAddressName": {
                      "type": "string"
                    },
                    "shirDnsLabal": {
                      "type": "string"
                    },
                    "shirNicName": {
                      "type": "string"
                    },
                    "shirVMName": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "allowSubnetIdsRules",
                        "count": "[length(parameters('allowSubnetIds'))]",
                        "input": {
                          "id": "[parameters('allowSubnetIds')[copyIndex('allowSubnetIdsRules')]]",
                          "action": "Allow"
                        }
                      }
                    ],
                    "ResourceAccessrules": [
                      {
                        "tenantId": "[subscription().tenantId]",
                        "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', subscription().subscriptionId)]"
                      }
                    ],
                    "managedVirtualNetworkSettings": "[if(equals(parameters('isDLPEnable'), true()), createObject('allowedAadTenantIdsForLinking', createArray(), 'linkedAccessCheckOnTargetResource', true(), 'preventDataExfiltration', true()), createObject())]",
                    "sqlPoolName": "dwh001",
                    "sqlPoolNameCleaned": "[replace(variables('sqlPoolName'), '-', '_')]",
                    "collation": "Japanese_XJIS_100_CI_AS",
                    "sparkPoolName": "sparkpool001",
                    "sparkPoolNameCleaned": "[replace(variables('sparkPoolName'), '-', '_')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Synapse/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('synapseName')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "defaultDataLakeStorage": {
                          "filesystem": "[last(split(reference(resourceId('Microsoft.Resources/deployments', parameters('synapseDefaultStorageAccountName'))).outputs.storageFileSystemIds.value[0].storageFileSystemId, '/'))]",
                          "accountUrl": "[format('https://{0}.dfs.{1}', parameters('synapseDefaultStorageAccountName'), environment().suffixes.storage)]"
                        },
                        "sqlAdministratorLogin": "[parameters('administratorUsername')]",
                        "sqlAdministratorLoginPassword": "[parameters('administratorPassword')]",
                        "publicNetworkAccess": "Enabled",
                        "managedVirtualNetwork": "default",
                        "managedVirtualNetworkSettings": "[variables('managedVirtualNetworkSettings')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', parameters('synapseDefaultStorageAccountName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('AllowAzure')]",
                      "type": "Microsoft.Synapse/workspaces/firewallRules",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), 'AllowAllWindowsAzureIps')]",
                      "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "0.0.0.0"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkACL",
                        "count": "[length(parameters('WhiteListsStartEndIPs'))]"
                      },
                      "type": "Microsoft.Synapse/workspaces/firewallRules",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), parameters('WhiteListsStartEndIPs')[copyIndex()].name)]",
                      "properties": {
                        "startIpAddress": "[parameters('WhiteListsStartEndIPs')[copyIndex()].startIpAddress]",
                        "endIpAddress": "[parameters('WhiteListsStartEndIPs')[copyIndex()].endIpAddress]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('synapseSqlAdminGroupName'))), not(empty(parameters('synapseSqlAdminGroupObjectID'))))]",
                      "type": "Microsoft.Synapse/workspaces/administrators",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), 'activeDirectory')]",
                      "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('synapseSqlAdminGroupName')]",
                        "sid": "[parameters('synapseSqlAdminGroupObjectID')]",
                        "tenantId": "[subscription().tenantId]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Synapse/workspaces/bigDataPools",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), variables('sparkPoolNameCleaned'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "autoPause": {
                          "enabled": true,
                          "delayInMinutes": 15
                        },
                        "autoScale": {
                          "enabled": true,
                          "minNodeCount": 3,
                          "maxNodeCount": 12
                        },
                        "customLibraries": [],
                        "nodeSize": "Small",
                        "nodeSizeFamily": "MemoryOptimized",
                        "sessionLevelPackagesEnabled": true,
                        "sparkVersion": "3.2",
                        "dynamicExecutorAllocation": {
                          "enabled": true,
                          "maxExecutors": 4,
                          "minExecutors": 1
                        }
                      },
                      "tags": "[parameters('tags')]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('isNeedSHIRforSynepse'), true())]",
                      "type": "Microsoft.Synapse/workspaces/integrationRuntimes",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), parameters('selfhostedIRName'))]",
                      "properties": {
                        "type": "SelfHosted"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('synapseDefaultStorageAccountName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "fileSystemNames": {
                            "value": [
                              "[format('work-{0}', parameters('synapseName'))]"
                            ]
                          },
                          "isHnsEnabled": {
                            "value": true
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "storageIPWhiteLists": {
                            "value": "[parameters('WhiteListsCIDRRules')]"
                          },
                          "virtualNetworkRules": {
                            "value": "[variables('allowSubnetIdsRules')]"
                          },
                          "storageName": {
                            "value": "[parameters('synapseDefaultStorageAccountName')]"
                          },
                          "storageSKU": {
                            "value": "Standard_ZRS"
                          },
                          "resourceAccessRules": {
                            "value": "[variables('ResourceAccessrules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "8766346466627536355"
                            }
                          },
                          "parameters": {
                            "storageName": {
                              "type": "string"
                            },
                            "fileSystemNames": {
                              "type": "array"
                            },
                            "storageIPWhiteLists": {
                              "type": "array"
                            },
                            "location": {
                              "type": "string"
                            },
                            "isHnsEnabled": {
                              "type": "bool"
                            },
                            "storageSKU": {
                              "type": "string"
                            },
                            "virtualNetworkRules": {
                              "type": "array"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "defaultAccessTier": {
                              "type": "string",
                              "defaultValue": "Hot"
                            },
                            "resourceAccessRules": {
                              "type": "array"
                            }
                          },
                          "variables": {
                            "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2021-02-01",
                              "name": "[variables('storageNameCleaned')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "SystemAssigned"
                              },
                              "sku": {
                                "name": "[parameters('storageSKU')]"
                              },
                              "kind": "StorageV2",
                              "properties": {
                                "accessTier": "[parameters('defaultAccessTier')]",
                                "allowBlobPublicAccess": false,
                                "allowSharedKeyAccess": true,
                                "encryption": {
                                  "keySource": "Microsoft.Storage",
                                  "services": {
                                    "blob": {
                                      "enabled": true,
                                      "keyType": "Account"
                                    },
                                    "file": {
                                      "enabled": true,
                                      "keyType": "Account"
                                    },
                                    "queue": {
                                      "enabled": true,
                                      "keyType": "Service"
                                    },
                                    "table": {
                                      "enabled": true,
                                      "keyType": "Service"
                                    }
                                  }
                                },
                                "isHnsEnabled": "[parameters('isHnsEnabled')]",
                                "networkAcls": {
                                  "bypass": "AzureServices",
                                  "defaultAction": "Deny",
                                  "ipRules": "[parameters('storageIPWhiteLists')]",
                                  "virtualNetworkRules": "[parameters('virtualNetworkRules')]",
                                  "resourceAccessRules": "[parameters('resourceAccessRules')]"
                                },
                                "supportsHttpsTrafficOnly": true
                              }
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                              "properties": {},
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "storageFileSystems",
                                "count": "[length(parameters('fileSystemNames'))]"
                              },
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                              "properties": {
                                "publicAccess": "None",
                                "metadata": {}
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                              ]
                            },
                            {
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2021-02-01",
                              "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                              "properties": {
                                "policy": {
                                  "rules": [
                                    {
                                      "enabled": true,
                                      "name": "toCool",
                                      "type": "Lifecycle",
                                      "definition": {
                                        "actions": {
                                          "baseBlob": {
                                            "tierToCool": {
                                              "daysAfterModificationGreaterThan": 90
                                            }
                                          }
                                        },
                                        "filters": {
                                          "blobTypes": [
                                            "blockBlob"
                                          ],
                                          "prefixMatch": []
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "storageId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                            },
                            "storageFileSystemIds": {
                              "type": "array",
                              "copy": {
                                "count": "[length(parameters('fileSystemNames'))]",
                                "input": {
                                  "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                                }
                              }
                            },
                            "accessRule": {
                              "type": "string",
                              "value": "[format('{0}/providers/Microsoft.MachineLearningServices/workspaces/*', resourceGroup().id)]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[equals(parameters('isNeedSqlPool'), true())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "sqlpool",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "sqlPooldwu": {
                            "value": "[parameters('sqlPooldwu')]"
                          },
                          "collation": {
                            "value": "[variables('collation')]"
                          },
                          "sqlPoolBackupType": {
                            "value": "[parameters('sqlPoolBackupType')]"
                          },
                          "sqlPoolName": {
                            "value": "[variables('sqlPoolNameCleaned')]"
                          },
                          "synapseId": {
                            "value": "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "13911733261761577321"
                            }
                          },
                          "parameters": {
                            "synapseId": {
                              "type": "string"
                            },
                            "sqlPoolName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "sqlPooldwu": {
                              "type": "string"
                            },
                            "collation": {
                              "type": "string"
                            },
                            "sqlPoolBackupType": {
                              "type": "string"
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Synapse/workspaces/sqlPools",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', last(split(parameters('synapseId'), '/')), parameters('sqlPoolName'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('sqlPooldwu')]"
                              },
                              "properties": {
                                "collation": "[parameters('collation')]",
                                "storageAccountType": "[parameters('sqlPoolBackupType')]"
                              }
                            },
                            {
                              "type": "Microsoft.Synapse/workspaces/sqlPools/transparentDataEncryption",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}/{2}', last(split(parameters('synapseId'), '/')), parameters('sqlPoolName'), 'current')]",
                              "properties": {
                                "status": "Enabled"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Synapse/workspaces/sqlPools', last(split(parameters('synapseId'), '/')), parameters('sqlPoolName'))]"
                              ]
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[equals(parameters('isNeedSHIRforSynepse'), true())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "runtime",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "adminPassword": {
                            "value": "[parameters('VMAdministratorLoginPassword')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('VMAdministratorLogin')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "nicName": {
                            "value": "[parameters('shirNicName')]"
                          },
                          "publicIpName": {
                            "value": "[parameters('shirPublicIPAddressName')]"
                          },
                          "subnetId": {
                            "value": "[parameters('shirSubnetId')]"
                          },
                          "vmName": {
                            "value": "[parameters('shirVMName')]"
                          },
                          "vmSize": {
                            "value": "[parameters('vmsku')]"
                          },
                          "dnsLabelPrefix": {
                            "value": "[parameters('shirDnsLabal')]"
                          },
                          "isSHIRMode": {
                            "value": true
                          },
                          "publicIPAllocationMethod": {
                            "value": "Dynamic"
                          },
                          "publicIpSku": {
                            "value": "Basic"
                          },
                          "OSVersion": {
                            "value": "2019-Datacenter"
                          },
                          "datafactoryIntegrationRuntimeAuthKey": {
                            "value": "[if(equals(parameters('isNeedSHIRforSynepse'), true()), listAuthKeys(resourceId('Microsoft.Synapse/workspaces/integrationRuntimes', parameters('synapseName'), parameters('selfhostedIRName')), '2021-06-01').authKey1, '')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.6.18.56646",
                              "templateHash": "410745011675740693"
                            }
                          },
                          "parameters": {
                            "adminUsername": {
                              "type": "string",
                              "metadata": {
                                "description": "Username for the Virtual Machine."
                              }
                            },
                            "adminPassword": {
                              "type": "secureString",
                              "minLength": 12,
                              "metadata": {
                                "description": "Password for the Virtual Machine."
                              }
                            },
                            "dnsLabelPrefix": {
                              "type": "string",
                              "defaultValue": "[toLower(format('{0}-{1}', parameters('vmName'), uniqueString(resourceGroup().id, parameters('vmName'))))]",
                              "metadata": {
                                "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "publicIpName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Dynamic",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Allocation method for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "publicIpSku": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "SKU for the Public IP used to access the Virtual Machine."
                              }
                            },
                            "OSVersion": {
                              "type": "string",
                              "defaultValue": "2019-datacenter-gensecond",
                              "allowedValues": [
                                "2019-datacenter-gensecond",
                                "2019-datacenter-core-gensecond",
                                "2019-datacenter-core-smalldisk-gensecond",
                                "2019-datacenter-core-with-containers-gensecond",
                                "2019-datacenter-core-with-containers-smalldisk-g2",
                                "2019-datacenter-smalldisk-gensecond",
                                "2019-datacenter-with-containers-gensecond",
                                "2019-datacenter-with-containers-smalldisk-g2",
                                "2016-datacenter-gensecond",
                                "2019-Datacenter"
                              ],
                              "metadata": {
                                "description": "The Windows version for the VM. This will pick a fully patched Gen2 image of this given Windows version."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Size of the virtual machine."
                              }
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location for all resources."
                              }
                            },
                            "vmName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the virtual machine."
                              }
                            },
                            "subnetId": {
                              "type": "string"
                            },
                            "nicName": {
                              "type": "string"
                            },
                            "isSHIRMode": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "datafactoryIntegrationRuntimeAuthKey": {
                              "type": "secureString",
                              "defaultValue": ""
                            },
                            "tags": {
                              "type": "object"
                            }
                          },
                          "variables": {
                            "$fxv#0": "IyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4KIyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgojIERlZmluZSBzY3JpcHQgYXJndW1lbnRzCltDbWRsZXRCaW5kaW5nKCldCnBhcmFtICgKCVtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQoJW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KCVtTdHJpbmddCgkkZ2F0ZXdheUtleSwKCglbUGFyYW1ldGVyKERvbnRTaG93KV0KCVtTdHJpbmddCgkkZ2F0ZXdheVVyaSA9ICJodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9saW5raWQ9ODM5ODIyIgopCgojIERlZmluZSB2YXJpYWJsZXMKJGdhdGV3YXlQYXRoID0gIiRQV0RcZ2F0ZXdheS5tc2kiCiRsb2dMb2MgPSAiJGVudjpTeXN0ZW1Ecml2ZVxXaW5kb3dzQXp1cmVcTG9nc1xQbHVnaW5zXE1pY3Jvc29mdC5Db21wdXRlLkN1c3RvbVNjcmlwdEV4dGVuc2lvblwiCiRsb2dQYXRoID0gIiRsb2dMb2NcdHJhY2Vsb2cubG9nIgoKZnVuY3Rpb24gTmV3LUVycm9yKFtzdHJpbmddICRtc2cpIHsKCXRyeSB7CgkJdGhyb3cgJG1zZwoJfQoJY2F0Y2ggewoJCSRzdGFjayA9ICRfLlNjcmlwdFN0YWNrVHJhY2UKCQlUcmFjZS1Mb2cgIkRNRFRUUCBpcyBmYWlsZWQ6ICRtc2dgblN0YWNrOmBuJHN0YWNrIgoJfQoJdGhyb3cgJG1zZwp9CgpmdW5jdGlvbiBUcmFjZS1Mb2coW3N0cmluZ10gJG1zZykgewoJJG5vdyA9IEdldC1EYXRlIC1Gb3JtYXQgInl5eXktTU0tZGQgSEg6bW06c3MiCgl0cnkgewoJCSIke25vd30gJG1zZ2BuIiB8IE91dC1GaWxlICRsb2dQYXRoIC1BcHBlbmQKCX0KCWNhdGNoIHsKCQlXcml0ZS1FcnJvciAiRXJyb3Igd2hlbiB3cml0aW5nIHRyYWNlIGxvZyIKCX0KfQoKZnVuY3Rpb24gSW52b2tlLVByb2Nlc3MoW3N0cmluZ10gJHByb2Nlc3MsIFtzdHJpbmddICRhcmd1bWVudHMpIHsKCVdyaXRlLVZlcmJvc2UgIlJ1bi1Qcm9jZXNzOiAkcHJvY2VzcyAkYXJndW1lbnRzIgoKCSRlcnJvckZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5lcnIiCgkkb3V0RmlsZSA9ICIkZW52OnRtcFx0bXAkcGlkLm91dCIKCSIiIHwgT3V0LUZpbGUgJG91dEZpbGUKCSIiIHwgT3V0LUZpbGUgJGVycm9yRmlsZQoKCSRlcnJWYXJpYWJsZSA9ICIiCgoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRhcmd1bWVudHMpKSB7CgkJJHByb2MgPSBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkcHJvY2VzcyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGAKCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlCgl9CgllbHNlIHsKCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50cyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGAKCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlCgl9CgoJJGVyckNvbnRlbnQgPSBbc3RyaW5nXSAoR2V0LUNvbnRlbnQgLVBhdGggJGVycm9yRmlsZSAtRGVsaW1pdGVyICIhISFEb2VzTm90RXhpc3QhISEiKQoJJG91dENvbnRlbnQgPSBbc3RyaW5nXSAoR2V0LUNvbnRlbnQgLVBhdGggJG91dEZpbGUgLURlbGltaXRlciAiISEhRG9lc05vdEV4aXN0ISEhIikKCglSZW1vdmUtSXRlbSAkZXJyb3JGaWxlCglSZW1vdmUtSXRlbSAkb3V0RmlsZQoKCWlmICgkcHJvYy5FeGl0Q29kZSAtbmUgMCAtb3IgJGVyclZhcmlhYmxlIC1uZSAiIikgewoJCU5ldy1FcnJvciAiRmFpbGVkIHRvIHJ1biBwcm9jZXNzOiBleGl0Q29kZT0kKCRwcm9jLkV4aXRDb2RlKSwgZXJyVmFyaWFibGU9JGVyclZhcmlhYmxlLCBlcnJDb250ZW50PSRlcnJDb250ZW50LCBvdXRDb250ZW50PSRvdXRDb250ZW50LiIKCX0KCglUcmFjZS1Mb2cgIlJ1bi1Qcm9jZXNzOiBFeGl0Q29kZT0kKCRwcm9jLkV4aXRDb2RlKSwgb3V0cHV0PSRvdXRDb250ZW50IgoKCWlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkb3V0Q29udGVudCkpIHsKCQlyZXR1cm4gJG91dENvbnRlbnQKCX0KCglyZXR1cm4gJG91dENvbnRlbnQuVHJpbSgpCn0KCmZ1bmN0aW9uIEdldC1HYXRld2F5KFtzdHJpbmddICR1cmwsIFtzdHJpbmddICRnYXRld2F5UGF0aCkgewoJdHJ5IHsKCQkkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gIlN0b3AiOwoJCSRjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50CgkJJGNsaWVudC5Eb3dubG9hZEZpbGUoJHVybCwgJGdhdGV3YXlQYXRoKQoJCVRyYWNlLUxvZyAiRG93bmxvYWQgZ2F0ZXdheSBzdWNjZXNzZnVsbHkuIEdhdGV3YXkgbG9jOiAke2dhdGV3YXlQYXRofSIKCX0KCWNhdGNoIHsKCQlUcmFjZS1Mb2cgIkZhaWwgdG8gZG93bmxvYWQgZ2F0ZXdheSBtc2kiCgkJVHJhY2UtTG9nICRfLkV4Y2VwdGlvbi5Ub1N0cmluZygpCgkJdGhyb3cKCX0KfQoKZnVuY3Rpb24gSW5zdGFsbC1HYXRld2F5KFtzdHJpbmddICRnYXRld2F5UGF0aCkgewoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRnYXRld2F5UGF0aCkpIHsKCQlOZXctRXJyb3IgIkdhdGV3YXkgcGF0aCBpcyBub3Qgc3BlY2lmaWVkIgoJfQoJaWYgKCEoVGVzdC1QYXRoIC1QYXRoICRnYXRld2F5UGF0aCkpIHsKCQlOZXctRXJyb3IgIkludmFsaWQgZ2F0ZXdheSBwYXRoOiAke2dhdGV3YXlQYXRofSIKCX0KCVRyYWNlLUxvZyAiU3RhcnQgR2F0ZXdheSBpbnN0YWxsYXRpb24iCglJbnZva2UtUHJvY2VzcyAibXNpZXhlYy5leGUiICIvaSBnYXRld2F5Lm1zaSBJTlNUQUxMVFlQRT1BenVyZVRlbXBsYXRlIC9xdWlldCAvbm9yZXN0YXJ0IgoJU3RhcnQtU2xlZXAgLVNlY29uZHMgMzAKCVRyYWNlLUxvZyAiSW5zdGFsbGF0aW9uIG9mIGdhdGV3YXkgaXMgc3VjY2Vzc2Z1bCIKfQoKZnVuY3Rpb24gR2V0LVJlZ2lzdHJ5UHJvcGVydHkoW3N0cmluZ10gJGtleVBhdGgsIFtzdHJpbmddICRwcm9wZXJ0eSkgewoJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogR2V0ICRwcm9wZXJ0eSBmcm9tICRrZXlQYXRoIgoJaWYgKCEgKFRlc3QtUGF0aCAka2V5UGF0aCkpIHsKCQlUcmFjZS1Mb2cgIkdldC1SZWdpc3RyeVByb3BlcnR5OiAka2V5UGF0aCBkb2VzIG5vdCBleGlzdCIKCX0KCgkka2V5UmVnID0gR2V0LUl0ZW0gJGtleVBhdGgKCWlmICghICgka2V5UmVnLlByb3BlcnR5IC1jb250YWlucyAkcHJvcGVydHkpKSB7CgkJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogJHByb3BlcnR5IGRvZXMgbm90IGV4aXN0IgoJCXJldHVybiAiIgoJfQoJcmV0dXJuICRrZXlSZWcuR2V0VmFsdWUoJHByb3BlcnR5KQp9CgpmdW5jdGlvbiBHZXQtSW5zdGFsbGVkRmlsZVBhdGgoKSB7CgkkZmlsZVBhdGggPSBHZXQtUmVnaXN0cnlQcm9wZXJ0eSAiaGtsbTpcU29mdHdhcmVcTWljcm9zb2Z0XERhdGFUcmFuc2ZlclxEYXRhTWFuYWdlbWVudEdhdGV3YXlcQ29uZmlndXJhdGlvbk1hbmFnZXIiICJEaWFjbWRQYXRoIgoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRmaWxlUGF0aCkpIHsKCQlOZXctRXJyb3IgIkdldC1JbnN0YWxsZWRGaWxlUGF0aDogQ2Fubm90IGZpbmQgaW5zdGFsbGVkIEZpbGUgUGF0aCIKCX0KCVRyYWNlLUxvZyAiR2F0ZXdheSBpbnN0YWxsYXRpb24gZmlsZTogJGZpbGVQYXRoIgoJcmV0dXJuICRmaWxlUGF0aAp9CgpmdW5jdGlvbiBSZWdpc3Rlci1HYXRld2F5KFtzdHJpbmddICRpbnN0YW5jZUtleSkgewoJVHJhY2UtTG9nICJSZWdpc3RlciBBZ2VudCIKCSRmaWxlUGF0aCA9IEdldC1JbnN0YWxsZWRGaWxlUGF0aAoJSW52b2tlLVByb2Nlc3MgJGZpbGVQYXRoICItZXJhIDgwNjAiCglJbnZva2UtUHJvY2VzcyAkZmlsZVBhdGggIi1rICRpbnN0YW5jZUtleSIKCVRyYWNlLUxvZyAiQWdlbnQgcmVnaXN0cmF0aW9uIGlzIHN1Y2Nlc3NmdWwhIgp9CgojIEluaXQgbG9nIHNldHRpbmdzCmlmICghKFRlc3QtUGF0aCgkbG9nTG9jKSkpIHsKCU5ldy1JdGVtIC1QYXRoICRsb2dMb2MgLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UKfQoiU3RhcnQgdG8gZXhjdXRlIGdhdGV3YXlJbnN0YWxsLnBzMS4gYG4iIHwgT3V0LUZpbGUgJGxvZ1BhdGgKVHJhY2UtTG9nICJMb2cgZmlsZTogJGxvZ0xvYyIKVHJhY2UtTG9nICJHYXRld2F5IGRvd25sb2FkIGZ3IGxpbms6ICR7Z2F0ZXdheVVyaX0iClRyYWNlLUxvZyAiR2F0ZXdheSBkb3dubG9hZCBsb2NhdGlvbjogJHtnYXRld2F5UGF0aH0iCgpHZXQtR2F0ZXdheSAkZ2F0ZXdheVVyaSAkZ2F0ZXdheVBhdGgKSW5zdGFsbC1HYXRld2F5ICRnYXRld2F5UGF0aApSZWdpc3Rlci1HYXRld2F5ICRnYXRld2F5S2V5",
                            "osProfile": "[if(equals(parameters('isSHIRMode'), true()), createObject('computerName', parameters('vmName'), 'adminUsername', parameters('adminUsername'), 'adminPassword', parameters('adminPassword'), 'customData', variables('$fxv#0')), createObject('computerName', parameters('vmName'), 'adminUsername', parameters('adminUsername'), 'adminPassword', parameters('adminPassword')))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('publicIpName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('publicIpSku')]"
                              },
                              "properties": {
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "dnsSettings": {
                                  "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Network/networkInterfaces",
                              "apiVersion": "2021-02-01",
                              "name": "[parameters('nicName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "properties": {
                                      "privateIPAllocationMethod": "Dynamic",
                                      "publicIPAddress": {
                                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                                      },
                                      "subnet": {
                                        "id": "[parameters('subnetId')]"
                                      }
                                    }
                                  }
                                ]
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                              ]
                            },
                            {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2021-03-01",
                              "name": "[parameters('vmName')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "osProfile": "[variables('osProfile')]",
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": true
                                  }
                                },
                                "storageProfile": {
                                  "imageReference": {
                                    "publisher": "MicrosoftWindowsServer",
                                    "offer": "WindowsServer",
                                    "sku": "[parameters('OSVersion')]",
                                    "version": "latest"
                                  },
                                  "osDisk": {
                                    "createOption": "FromImage",
                                    "managedDisk": {
                                      "storageAccountType": "StandardSSD_LRS"
                                    }
                                  },
                                  "dataDisks": [
                                    {
                                      "diskSizeGB": 1023,
                                      "lun": 0,
                                      "createOption": "Empty"
                                    }
                                  ]
                                },
                                "networkProfile": {
                                  "networkInterfaces": [
                                    {
                                      "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                              ]
                            },
                            {
                              "condition": "[parameters('isSHIRMode')]",
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-11-01",
                              "name": "[format('{0}/{1}', parameters('vmName'), 'installGW')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "Microsoft.Compute",
                                "type": "CustomScriptExtension",
                                "typeHandlerVersion": "1.7",
                                "autoUpgradeMinorVersion": true,
                                "settings": {
                                  "fileUris": []
                                },
                                "protectedSettings": {
                                  "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"cp c:/azuredata/customdata.bin c:/azuredata/installSHIRGateway.ps1; c:/azuredata/installSHIRGateway.ps1 -gatewayKey \"{0}\"', parameters('datafactoryIntegrationRuntimeAuthKey'))]"
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "hostname": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))).dnsSettings.fqdn]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces/integrationRuntimes', parameters('synapseName'), parameters('selfhostedIRName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "synapseId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                    },
                    "sparkPoolId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Synapse/workspaces/bigDataPools', parameters('synapseName'), variables('sparkPoolNameCleaned'))]"
                    },
                    "synapseStorageId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('synapseDefaultStorageAccountName'))).outputs.storageId.value]"
                    },
                    "synapsePrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Synapse/workspaces', parameters('synapseName')), '2021-06-01', 'full').identity.principalId]"
                    },
                    "synapseFilesystemId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('synapseDefaultStorageAccountName'))).outputs.storageFileSystemIds.value[0].storageFileSystemId]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('isNeedSQL'), true())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "sql",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "allowSubnetIds": {
                    "value": [
                      "[parameters('mlcomputeSubnetId')]",
                      "[parameters('customPublicSubnetId')]",
                      "[parameters('runtimeSubnetId')]"
                    ]
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "sqlAdministratorLogin": {
                    "value": "[parameters('sqlAdministratorUsername')]"
                  },
                  "sqlAdministratorLoginPassword": {
                    "value": "[parameters('sqlAdministratorPassword')]"
                  },
                  "sqlDatabaseName": {
                    "value": "[variables('sqlDatabaseName')]"
                  },
                  "sqlIPWhiteLists": {
                    "value": "[parameters('WhiteListsStartEndIPs')]"
                  },
                  "sqlServerName": {
                    "value": "[variables('sqlServerName')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "9307880529690160079"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "sqlServerName": {
                      "type": "string"
                    },
                    "sqlDatabaseName": {
                      "type": "string"
                    },
                    "allowSubnetIds": {
                      "type": "array"
                    },
                    "sqlIPWhiteLists": {
                      "type": "array"
                    },
                    "sqlAdministratorLogin": {
                      "type": "string"
                    },
                    "sqlAdministratorLoginPassword": {
                      "type": "secureString"
                    },
                    "collation": {
                      "type": "string",
                      "defaultValue": "Japanese_XJIS_100_CI_AS",
                      "metadata": {
                        "description": "日本語環境での推奨値です"
                      }
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[parameters('sqlServerName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                        "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
                        "version": "12.0",
                        "publicNetworkAccess": "Enabled"
                      }
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('sqlDatabaseName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "GP_S_Gen5",
                        "tier": "GeneralPurpose",
                        "family": "Gen5",
                        "capacity": 4
                      },
                      "properties": {
                        "collation": "[parameters('collation')]",
                        "maxSizeBytes": 268435456000,
                        "zoneRedundant": false,
                        "readScale": "Disabled",
                        "autoPauseDelay": 60
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/securityAlertPolicies",
                      "apiVersion": "2017-03-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlServerName'), 'Default')]",
                      "properties": {
                        "state": "Enabled",
                        "emailAccountAdmins": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "sqlServerVirtualNetworkRules",
                        "count": "[length(parameters('allowSubnetIds'))]"
                      },
                      "type": "Microsoft.Sql/servers/virtualNetworkRules",
                      "apiVersion": "2015-05-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlServerName'), last(split(parameters('allowSubnetIds')[copyIndex()], '/')))]",
                      "properties": {
                        "virtualNetworkSubnetId": "[parameters('allowSubnetIds')[copyIndex()]]",
                        "ignoreMissingVnetServiceEndpoint": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "firewallRules",
                        "count": "[length(parameters('sqlIPWhiteLists'))]"
                      },
                      "type": "Microsoft.Sql/servers/firewallRules",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlServerName'), parameters('sqlIPWhiteLists')[copyIndex()].name)]",
                      "properties": {
                        "startIpAddress": "[parameters('sqlIPWhiteLists')[copyIndex()].startIpAddress]",
                        "endIpAddress": "[parameters('sqlIPWhiteLists')[copyIndex()].endIpAddress]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "sqlDatabaseId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers/databases', parameters('sqlServerName'), parameters('sqlDatabaseName'))]"
                    },
                    "sqlServerId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                    },
                    "sqlServerPrincipalId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Sql/servers', parameters('sqlServerName')), '2021-11-01-preview', 'full').identity.principalId]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('isNeedVMforOnPremiseDataGateway'), true())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "pbigw",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "adminPassword": {
                    "value": "[parameters('VMAdministratorLoginPassword')]"
                  },
                  "adminUsername": {
                    "value": "[parameters('VMAdministratorLogin')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "nicName": {
                    "value": "[variables('powerbiGWNicName')]"
                  },
                  "publicIpName": {
                    "value": "[variables('powerbiGWPublicIPAddressName')]"
                  },
                  "subnetId": {
                    "value": "[parameters('runtimeSubnetId')]"
                  },
                  "tags": {
                    "value": "[variables('tagJoin')]"
                  },
                  "vmName": {
                    "value": "[variables('powerbiGWVMName')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmsku')]"
                  },
                  "dnsLabelPrefix": {
                    "value": "[variables('powerbiGWDnsLabal')]"
                  },
                  "isSHIRMode": {
                    "value": false
                  },
                  "publicIPAllocationMethod": {
                    "value": "Dynamic"
                  },
                  "publicIpSku": {
                    "value": "Basic"
                  },
                  "OSVersion": {
                    "value": "2019-Datacenter"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "410745011675740693"
                    }
                  },
                  "parameters": {
                    "adminUsername": {
                      "type": "string",
                      "metadata": {
                        "description": "Username for the Virtual Machine."
                      }
                    },
                    "adminPassword": {
                      "type": "secureString",
                      "minLength": 12,
                      "metadata": {
                        "description": "Password for the Virtual Machine."
                      }
                    },
                    "dnsLabelPrefix": {
                      "type": "string",
                      "defaultValue": "[toLower(format('{0}-{1}', parameters('vmName'), uniqueString(resourceGroup().id, parameters('vmName'))))]",
                      "metadata": {
                        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
                      }
                    },
                    "publicIpName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name for the Public IP used to access the Virtual Machine."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Dynamic",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Allocation method for the Public IP used to access the Virtual Machine."
                      }
                    },
                    "publicIpSku": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "SKU for the Public IP used to access the Virtual Machine."
                      }
                    },
                    "OSVersion": {
                      "type": "string",
                      "defaultValue": "2019-datacenter-gensecond",
                      "allowedValues": [
                        "2019-datacenter-gensecond",
                        "2019-datacenter-core-gensecond",
                        "2019-datacenter-core-smalldisk-gensecond",
                        "2019-datacenter-core-with-containers-gensecond",
                        "2019-datacenter-core-with-containers-smalldisk-g2",
                        "2019-datacenter-smalldisk-gensecond",
                        "2019-datacenter-with-containers-gensecond",
                        "2019-datacenter-with-containers-smalldisk-g2",
                        "2016-datacenter-gensecond",
                        "2019-Datacenter"
                      ],
                      "metadata": {
                        "description": "The Windows version for the VM. This will pick a fully patched Gen2 image of this given Windows version."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "metadata": {
                        "description": "Size of the virtual machine."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all resources."
                      }
                    },
                    "vmName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the virtual machine."
                      }
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "nicName": {
                      "type": "string"
                    },
                    "isSHIRMode": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "datafactoryIntegrationRuntimeAuthKey": {
                      "type": "secureString",
                      "defaultValue": ""
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "$fxv#0": "IyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4KIyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCgojIERlZmluZSBzY3JpcHQgYXJndW1lbnRzCltDbWRsZXRCaW5kaW5nKCldCnBhcmFtICgKCVtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQoJW1ZhbGlkYXRlTm90TnVsbE9yRW1wdHkoKV0KCVtTdHJpbmddCgkkZ2F0ZXdheUtleSwKCglbUGFyYW1ldGVyKERvbnRTaG93KV0KCVtTdHJpbmddCgkkZ2F0ZXdheVVyaSA9ICJodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9saW5raWQ9ODM5ODIyIgopCgojIERlZmluZSB2YXJpYWJsZXMKJGdhdGV3YXlQYXRoID0gIiRQV0RcZ2F0ZXdheS5tc2kiCiRsb2dMb2MgPSAiJGVudjpTeXN0ZW1Ecml2ZVxXaW5kb3dzQXp1cmVcTG9nc1xQbHVnaW5zXE1pY3Jvc29mdC5Db21wdXRlLkN1c3RvbVNjcmlwdEV4dGVuc2lvblwiCiRsb2dQYXRoID0gIiRsb2dMb2NcdHJhY2Vsb2cubG9nIgoKZnVuY3Rpb24gTmV3LUVycm9yKFtzdHJpbmddICRtc2cpIHsKCXRyeSB7CgkJdGhyb3cgJG1zZwoJfQoJY2F0Y2ggewoJCSRzdGFjayA9ICRfLlNjcmlwdFN0YWNrVHJhY2UKCQlUcmFjZS1Mb2cgIkRNRFRUUCBpcyBmYWlsZWQ6ICRtc2dgblN0YWNrOmBuJHN0YWNrIgoJfQoJdGhyb3cgJG1zZwp9CgpmdW5jdGlvbiBUcmFjZS1Mb2coW3N0cmluZ10gJG1zZykgewoJJG5vdyA9IEdldC1EYXRlIC1Gb3JtYXQgInl5eXktTU0tZGQgSEg6bW06c3MiCgl0cnkgewoJCSIke25vd30gJG1zZ2BuIiB8IE91dC1GaWxlICRsb2dQYXRoIC1BcHBlbmQKCX0KCWNhdGNoIHsKCQlXcml0ZS1FcnJvciAiRXJyb3Igd2hlbiB3cml0aW5nIHRyYWNlIGxvZyIKCX0KfQoKZnVuY3Rpb24gSW52b2tlLVByb2Nlc3MoW3N0cmluZ10gJHByb2Nlc3MsIFtzdHJpbmddICRhcmd1bWVudHMpIHsKCVdyaXRlLVZlcmJvc2UgIlJ1bi1Qcm9jZXNzOiAkcHJvY2VzcyAkYXJndW1lbnRzIgoKCSRlcnJvckZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5lcnIiCgkkb3V0RmlsZSA9ICIkZW52OnRtcFx0bXAkcGlkLm91dCIKCSIiIHwgT3V0LUZpbGUgJG91dEZpbGUKCSIiIHwgT3V0LUZpbGUgJGVycm9yRmlsZQoKCSRlcnJWYXJpYWJsZSA9ICIiCgoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRhcmd1bWVudHMpKSB7CgkJJHByb2MgPSBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkcHJvY2VzcyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGAKCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlCgl9CgllbHNlIHsKCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50cyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGAKCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlCgl9CgoJJGVyckNvbnRlbnQgPSBbc3RyaW5nXSAoR2V0LUNvbnRlbnQgLVBhdGggJGVycm9yRmlsZSAtRGVsaW1pdGVyICIhISFEb2VzTm90RXhpc3QhISEiKQoJJG91dENvbnRlbnQgPSBbc3RyaW5nXSAoR2V0LUNvbnRlbnQgLVBhdGggJG91dEZpbGUgLURlbGltaXRlciAiISEhRG9lc05vdEV4aXN0ISEhIikKCglSZW1vdmUtSXRlbSAkZXJyb3JGaWxlCglSZW1vdmUtSXRlbSAkb3V0RmlsZQoKCWlmICgkcHJvYy5FeGl0Q29kZSAtbmUgMCAtb3IgJGVyclZhcmlhYmxlIC1uZSAiIikgewoJCU5ldy1FcnJvciAiRmFpbGVkIHRvIHJ1biBwcm9jZXNzOiBleGl0Q29kZT0kKCRwcm9jLkV4aXRDb2RlKSwgZXJyVmFyaWFibGU9JGVyclZhcmlhYmxlLCBlcnJDb250ZW50PSRlcnJDb250ZW50LCBvdXRDb250ZW50PSRvdXRDb250ZW50LiIKCX0KCglUcmFjZS1Mb2cgIlJ1bi1Qcm9jZXNzOiBFeGl0Q29kZT0kKCRwcm9jLkV4aXRDb2RlKSwgb3V0cHV0PSRvdXRDb250ZW50IgoKCWlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkb3V0Q29udGVudCkpIHsKCQlyZXR1cm4gJG91dENvbnRlbnQKCX0KCglyZXR1cm4gJG91dENvbnRlbnQuVHJpbSgpCn0KCmZ1bmN0aW9uIEdldC1HYXRld2F5KFtzdHJpbmddICR1cmwsIFtzdHJpbmddICRnYXRld2F5UGF0aCkgewoJdHJ5IHsKCQkkRXJyb3JBY3Rpb25QcmVmZXJlbmNlID0gIlN0b3AiOwoJCSRjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50CgkJJGNsaWVudC5Eb3dubG9hZEZpbGUoJHVybCwgJGdhdGV3YXlQYXRoKQoJCVRyYWNlLUxvZyAiRG93bmxvYWQgZ2F0ZXdheSBzdWNjZXNzZnVsbHkuIEdhdGV3YXkgbG9jOiAke2dhdGV3YXlQYXRofSIKCX0KCWNhdGNoIHsKCQlUcmFjZS1Mb2cgIkZhaWwgdG8gZG93bmxvYWQgZ2F0ZXdheSBtc2kiCgkJVHJhY2UtTG9nICRfLkV4Y2VwdGlvbi5Ub1N0cmluZygpCgkJdGhyb3cKCX0KfQoKZnVuY3Rpb24gSW5zdGFsbC1HYXRld2F5KFtzdHJpbmddICRnYXRld2F5UGF0aCkgewoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRnYXRld2F5UGF0aCkpIHsKCQlOZXctRXJyb3IgIkdhdGV3YXkgcGF0aCBpcyBub3Qgc3BlY2lmaWVkIgoJfQoJaWYgKCEoVGVzdC1QYXRoIC1QYXRoICRnYXRld2F5UGF0aCkpIHsKCQlOZXctRXJyb3IgIkludmFsaWQgZ2F0ZXdheSBwYXRoOiAke2dhdGV3YXlQYXRofSIKCX0KCVRyYWNlLUxvZyAiU3RhcnQgR2F0ZXdheSBpbnN0YWxsYXRpb24iCglJbnZva2UtUHJvY2VzcyAibXNpZXhlYy5leGUiICIvaSBnYXRld2F5Lm1zaSBJTlNUQUxMVFlQRT1BenVyZVRlbXBsYXRlIC9xdWlldCAvbm9yZXN0YXJ0IgoJU3RhcnQtU2xlZXAgLVNlY29uZHMgMzAKCVRyYWNlLUxvZyAiSW5zdGFsbGF0aW9uIG9mIGdhdGV3YXkgaXMgc3VjY2Vzc2Z1bCIKfQoKZnVuY3Rpb24gR2V0LVJlZ2lzdHJ5UHJvcGVydHkoW3N0cmluZ10gJGtleVBhdGgsIFtzdHJpbmddICRwcm9wZXJ0eSkgewoJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogR2V0ICRwcm9wZXJ0eSBmcm9tICRrZXlQYXRoIgoJaWYgKCEgKFRlc3QtUGF0aCAka2V5UGF0aCkpIHsKCQlUcmFjZS1Mb2cgIkdldC1SZWdpc3RyeVByb3BlcnR5OiAka2V5UGF0aCBkb2VzIG5vdCBleGlzdCIKCX0KCgkka2V5UmVnID0gR2V0LUl0ZW0gJGtleVBhdGgKCWlmICghICgka2V5UmVnLlByb3BlcnR5IC1jb250YWlucyAkcHJvcGVydHkpKSB7CgkJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogJHByb3BlcnR5IGRvZXMgbm90IGV4aXN0IgoJCXJldHVybiAiIgoJfQoJcmV0dXJuICRrZXlSZWcuR2V0VmFsdWUoJHByb3BlcnR5KQp9CgpmdW5jdGlvbiBHZXQtSW5zdGFsbGVkRmlsZVBhdGgoKSB7CgkkZmlsZVBhdGggPSBHZXQtUmVnaXN0cnlQcm9wZXJ0eSAiaGtsbTpcU29mdHdhcmVcTWljcm9zb2Z0XERhdGFUcmFuc2ZlclxEYXRhTWFuYWdlbWVudEdhdGV3YXlcQ29uZmlndXJhdGlvbk1hbmFnZXIiICJEaWFjbWRQYXRoIgoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRmaWxlUGF0aCkpIHsKCQlOZXctRXJyb3IgIkdldC1JbnN0YWxsZWRGaWxlUGF0aDogQ2Fubm90IGZpbmQgaW5zdGFsbGVkIEZpbGUgUGF0aCIKCX0KCVRyYWNlLUxvZyAiR2F0ZXdheSBpbnN0YWxsYXRpb24gZmlsZTogJGZpbGVQYXRoIgoJcmV0dXJuICRmaWxlUGF0aAp9CgpmdW5jdGlvbiBSZWdpc3Rlci1HYXRld2F5KFtzdHJpbmddICRpbnN0YW5jZUtleSkgewoJVHJhY2UtTG9nICJSZWdpc3RlciBBZ2VudCIKCSRmaWxlUGF0aCA9IEdldC1JbnN0YWxsZWRGaWxlUGF0aAoJSW52b2tlLVByb2Nlc3MgJGZpbGVQYXRoICItZXJhIDgwNjAiCglJbnZva2UtUHJvY2VzcyAkZmlsZVBhdGggIi1rICRpbnN0YW5jZUtleSIKCVRyYWNlLUxvZyAiQWdlbnQgcmVnaXN0cmF0aW9uIGlzIHN1Y2Nlc3NmdWwhIgp9CgojIEluaXQgbG9nIHNldHRpbmdzCmlmICghKFRlc3QtUGF0aCgkbG9nTG9jKSkpIHsKCU5ldy1JdGVtIC1QYXRoICRsb2dMb2MgLUl0ZW1UeXBlIERpcmVjdG9yeSAtRm9yY2UKfQoiU3RhcnQgdG8gZXhjdXRlIGdhdGV3YXlJbnN0YWxsLnBzMS4gYG4iIHwgT3V0LUZpbGUgJGxvZ1BhdGgKVHJhY2UtTG9nICJMb2cgZmlsZTogJGxvZ0xvYyIKVHJhY2UtTG9nICJHYXRld2F5IGRvd25sb2FkIGZ3IGxpbms6ICR7Z2F0ZXdheVVyaX0iClRyYWNlLUxvZyAiR2F0ZXdheSBkb3dubG9hZCBsb2NhdGlvbjogJHtnYXRld2F5UGF0aH0iCgpHZXQtR2F0ZXdheSAkZ2F0ZXdheVVyaSAkZ2F0ZXdheVBhdGgKSW5zdGFsbC1HYXRld2F5ICRnYXRld2F5UGF0aApSZWdpc3Rlci1HYXRld2F5ICRnYXRld2F5S2V5",
                    "osProfile": "[if(equals(parameters('isSHIRMode'), true()), createObject('computerName', parameters('vmName'), 'adminUsername', parameters('adminUsername'), 'adminPassword', parameters('adminPassword'), 'customData', variables('$fxv#0')), createObject('computerName', parameters('vmName'), 'adminUsername', parameters('adminUsername'), 'adminPassword', parameters('adminPassword')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('publicIpName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('publicIpSku')]"
                      },
                      "properties": {
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "dnsSettings": {
                          "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-02-01",
                      "name": "[parameters('nicName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "ipConfigurations": [
                          {
                            "name": "ipconfig1",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                              },
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "osProfile": "[variables('osProfile')]",
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": true
                          }
                        },
                        "storageProfile": {
                          "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "[parameters('OSVersion')]",
                            "version": "latest"
                          },
                          "osDisk": {
                            "createOption": "FromImage",
                            "managedDisk": {
                              "storageAccountType": "StandardSSD_LRS"
                            }
                          },
                          "dataDisks": [
                            {
                              "diskSizeGB": 1023,
                              "lun": 0,
                              "createOption": "Empty"
                            }
                          ]
                        },
                        "networkProfile": {
                          "networkInterfaces": [
                            {
                              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('nicName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('isSHIRMode')]",
                      "type": "Microsoft.Compute/virtualMachines/extensions",
                      "apiVersion": "2021-11-01",
                      "name": "[format('{0}/{1}', parameters('vmName'), 'installGW')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "publisher": "Microsoft.Compute",
                        "type": "CustomScriptExtension",
                        "typeHandlerVersion": "1.7",
                        "autoUpgradeMinorVersion": true,
                        "settings": {
                          "fileUris": []
                        },
                        "protectedSettings": {
                          "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"cp c:/azuredata/customdata.bin c:/azuredata/installSHIRGateway.ps1; c:/azuredata/installSHIRGateway.ps1 -gatewayKey \"{0}\"', parameters('datafactoryIntegrationRuntimeAuthKey'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "hostname": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('publicIpName'))).dnsSettings.fqdn]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "databricksId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedDatabricks'), true()), reference(resourceId('Microsoft.Resources/deployments', variables('databricksName')), '2020-10-01').outputs.databricksWorkspaceId.value, '')]"
            },
            "datafactoryId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedDataFactory'), true()), reference(resourceId('Microsoft.Resources/deployments', variables('datafactoryName')), '2020-10-01').outputs.datafactoryId.value, '')]"
            },
            "datafactoryPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedDataFactory'), true()), reference(resourceId('Microsoft.Resources/deployments', variables('datafactoryName')), '2020-10-01').outputs.datafactoryPrincipalId.value, '')]"
            },
            "synapseId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSynapse'), true()), reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2020-10-01').outputs.synapseId.value, '')]"
            },
            "synapsePrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSynapse'), true()), reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2020-10-01').outputs.synapsePrincipalId.value, '')]"
            },
            "synapseStorageId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSynapse'), true()), reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2020-10-01').outputs.synapseStorageId.value, '')]"
            },
            "synapseFilesystemId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSynapse'), true()), reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2020-10-01').outputs.synapseFilesystemId.value, '')]"
            },
            "sparkPoolId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSynapse'), true()), reference(resourceId('Microsoft.Resources/deployments', 'synapse'), '2020-10-01').outputs.sparkPoolId.value, '')]"
            },
            "machinelearningId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedMachineLearning'), true()), reference(resourceId('Microsoft.Resources/deployments', 'machinelearning'), '2020-10-01').outputs.machinelearningWorkspaceId.value, '')]"
            },
            "containerRegistryId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedMachineLearning'), true()), reference(resourceId('Microsoft.Resources/deployments', 'machinelearning'), '2020-10-01').outputs.containerRegistryId.value, '')]"
            },
            "mlstorageId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedMachineLearning'), true()), reference(resourceId('Microsoft.Resources/deployments', 'machinelearning'), '2020-10-01').outputs.mlstorageId.value, '')]"
            },
            "sqlServerId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSQL'), true()), reference(resourceId('Microsoft.Resources/deployments', 'sql'), '2020-10-01').outputs.sqlServerId.value, '')]"
            },
            "sqlServerPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSQL'), true()), reference(resourceId('Microsoft.Resources/deployments', 'sql'), '2020-10-01').outputs.sqlServerPrincipalId.value, '')]"
            },
            "sqlDatabaseId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSQL'), true()), reference(resourceId('Microsoft.Resources/deployments', 'sql'), '2020-10-01').outputs.sqlDatabaseId.value, '')]"
            },
            "machinelearningPrincipalId": {
              "type": "string",
              "value": "[if(equals(parameters('isNeedSQL'), true()), reference(resourceId('Microsoft.Resources/deployments', 'machinelearning'), '2020-10-01').outputs.machinelearningPrincipalId.value, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appKeyvault')]",
        "[resourceId('Microsoft.Resources/deployments', 'network')]"
      ]
    },
    {
      "condition": "[equals(parameters('isNeedDatabricks'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "databricksRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "databricksWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.databricksId.value]"
          },
          "datafacoryPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.datafactoryPrincipalId.value]"
          },
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "2516508100000391137"
            }
          },
          "parameters": {
            "databricksWorkspaceId": {
              "type": "string"
            },
            "datafacoryPrincipalId": {
              "type": "string"
            },
            "synapsePrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('datafacoryPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Databricks/workspaces/{0}', last(split(parameters('databricksWorkspaceId'), '/')))]",
              "name": "[guid(parameters('datafacoryPrincipalId'), parameters('databricksWorkspaceId'), variables('contributorRoleId'), 'datafactoryToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('datafacoryPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Databricks/workspaces/{0}', last(split(parameters('databricksWorkspaceId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('databricksWorkspaceId'), variables('contributorRoleId'), 'synapseToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "datalakesRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "datafacoryPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.datafactoryPrincipalId.value]"
          },
          "enrichCurateStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datalake')).outputs.enCurLakeId.value]"
          },
          "landingRawStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datalake')).outputs.landingRawLakeId.value]"
          },
          "machinelearningPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.machinelearningPrincipalId.value]"
          },
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "5847927620451419510"
            }
          },
          "parameters": {
            "landingRawStorageId": {
              "type": "string"
            },
            "enrichCurateStorageId": {
              "type": "string"
            },
            "datafacoryPrincipalId": {
              "type": "string"
            },
            "synapsePrincipalId": {
              "type": "string"
            },
            "machinelearningPrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('datafacoryPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('landingRawStorageId'), '/')))]",
              "name": "[guid(parameters('datafacoryPrincipalId'), parameters('landingRawStorageId'), variables('storageBlobDataContributorRoleId'), 'datafactoryTolandingRawLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('datafacoryPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('landingRawStorageId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('landingRawStorageId'), variables('storageBlobDataContributorRoleId'), 'synapseTolandingRawLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('datafacoryPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('enrichCurateStorageId'), '/')))]",
              "name": "[guid(parameters('datafacoryPrincipalId'), parameters('enrichCurateStorageId'), variables('storageBlobDataContributorRoleId'), 'datafactoryToenrichCurateLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('datafacoryPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('enrichCurateStorageId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('enrichCurateStorageId'), variables('storageBlobDataContributorRoleId'), 'synapseToenrichCurateLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('machinelearningPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('enrichCurateStorageId'), '/')))]",
              "name": "[guid(parameters('machinelearningPrincipalId'), parameters('enrichCurateStorageId'), variables('storageBlobDataContributorRoleId'), 'machinelearningToenrichCurateLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('machinelearningPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]",
        "[resourceId('Microsoft.Resources/deployments', 'datalake')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "keyvaultRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "databricksAppObjectId": {
            "value": "[parameters('databricksAppObjectId')]"
          },
          "datafacoryPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.datafactoryPrincipalId.value]"
          },
          "keyvaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appKeyvault')).outputs.keyvaultId.value]"
          },
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "6686086021468543556"
            }
          },
          "parameters": {
            "keyvaultId": {
              "type": "string"
            },
            "datafacoryPrincipalId": {
              "type": "string"
            },
            "synapsePrincipalId": {
              "type": "string"
            },
            "databricksAppObjectId": {
              "type": "string"
            }
          },
          "variables": {
            "secretUserRoleId": "4633458b-17de-408a-b874-0445c86b69e6",
            "secretOfficerRoleId": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('datafacoryPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyvaultId'), '/')))]",
              "name": "[guid(parameters('datafacoryPrincipalId'), parameters('keyvaultId'), variables('secretUserRoleId'), 'datafactoryToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('secretUserRoleId'))]",
                "principalId": "[parameters('datafacoryPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyvaultId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('keyvaultId'), variables('secretUserRoleId'), 'synapseToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('secretUserRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('databricksAppObjectId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyvaultId'), '/')))]",
              "name": "[guid(parameters('databricksAppObjectId'), parameters('keyvaultId'), variables('secretOfficerRoleId'), 'databricksAppToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('secretOfficerRoleId'))]",
                "principalId": "[parameters('databricksAppObjectId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appKeyvault')]",
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "loggingRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loggingStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging')).outputs.LoggingStorageId.value]"
          },
          "sqlserverPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.sqlServerPrincipalId.value]"
          },
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "11733359239149698572"
            }
          },
          "parameters": {
            "loggingStorageId": {
              "type": "string"
            },
            "synapsePrincipalId": {
              "type": "string"
            },
            "sqlserverPrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('sqlserverPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('loggingStorageId'), '/')))]",
              "name": "[guid(parameters('sqlserverPrincipalId'), parameters('loggingStorageId'), variables('storageBlobDataContributorRoleId'), 'sqlTologgingStorage')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('sqlserverPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('loggingStorageId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('loggingStorageId'), variables('storageBlobDataContributorRoleId'), 'synapseTologgingStorage')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]",
        "[resourceId('Microsoft.Resources/deployments', 'logging')]"
      ]
    },
    {
      "condition": "[equals(parameters('isNeedMachineLearning'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "machinelearningRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "datafacoryPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.datafactoryPrincipalId.value]"
          },
          "machinelearningId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.machinelearningId.value]"
          },
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "15305665107175313726"
            }
          },
          "parameters": {
            "machinelearningId": {
              "type": "string"
            },
            "datafacoryPrincipalId": {
              "type": "string"
            },
            "synapsePrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "contributorRoleId": "b24988ac-6180-42a0-ab88-20f7382dd24c"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('datafacoryPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', last(split(parameters('machinelearningId'), '/')))]",
              "name": "[guid(parameters('datafacoryPrincipalId'), parameters('machinelearningId'), variables('contributorRoleId'), 'datafactoryToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('datafacoryPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', last(split(parameters('machinelearningId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('machinelearningId'), variables('contributorRoleId'), 'synapseToDatabricksContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "uploadStorageRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "datafacoryPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.datafactoryPrincipalId.value]"
          },
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          },
          "uploadStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'uploads')).outputs.uploadStorageId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "814821875533566460"
            }
          },
          "parameters": {
            "uploadStorageId": {
              "type": "string"
            },
            "synapsePrincipalId": {
              "type": "string"
            },
            "datafacoryPrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('uploadStorageId'), '/')))]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('uploadStorageId'), variables('storageBlobDataContributorRoleId'), 'synapseTologgingStorage')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "condition": "[not(empty(parameters('datafacoryPrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('uploadStorageId'), '/')))]",
              "name": "[guid(parameters('datafacoryPrincipalId'), parameters('uploadStorageId'), variables('storageBlobDataContributorRoleId'), 'datafactoryTolandingRawLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('datafacoryPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]",
        "[resourceId('Microsoft.Resources/deployments', 'uploads')]"
      ]
    },
    {
      "condition": "[equals(parameters('isNeedSynapse'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "workspaceLakeRBAC",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "synapsePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapsePrincipalId.value]"
          },
          "workspaceLakeFilesystemId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapseFilesystemId.value]"
          },
          "workspaceLakeId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapseStorageId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "2650309431194168267"
            }
          },
          "parameters": {
            "synapsePrincipalId": {
              "type": "string"
            },
            "workspaceLakeId": {
              "type": "string"
            },
            "workspaceLakeFilesystemId": {
              "type": "string"
            }
          },
          "variables": {
            "storageBlobDataContributorRoleId": "ba92f5b4-2d11-453d-a403-e96b0029c9fe"
          },
          "resources": [
            {
              "condition": "[not(empty(parameters('synapsePrincipalId')))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', last(split(parameters('workspaceLakeId'), '/')), 'default')]",
              "name": "[guid(parameters('synapsePrincipalId'), parameters('workspaceLakeFilesystemId'), variables('storageBlobDataContributorRoleId'), 'synapseToworkspaceLake')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataContributorRoleId'))]",
                "principalId": "[parameters('synapsePrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "loggingsetting",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "databricksId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.databricksId.value]"
          },
          "datafactoryId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.datafactoryId.value]"
          },
          "enrichCurateStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datalake')).outputs.enCurLakeId.value]"
          },
          "keyvaultId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'appKeyvault')).outputs.keyvaultId.value]"
          },
          "landingRawStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datalake')).outputs.landingRawLakeId.value]"
          },
          "loganalyticsId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging')).outputs.logAnalyticsWorkspaceId.value]"
          },
          "loggingStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging')).outputs.LoggingStorageId.value]"
          },
          "machinelearningId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.machinelearningId.value]"
          },
          "mlStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.mlstorageId.value]"
          },
          "mlAcrId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.containerRegistryId.value]"
          },
          "sparkpoolId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.sparkPoolId.value]"
          },
          "sqldatabaseId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.sqlDatabaseId.value]"
          },
          "sqlServerId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.sqlServerId.value]"
          },
          "synapseId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapseId.value]"
          },
          "synapseStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'dataApps')).outputs.synapseStorageId.value]"
          },
          "uploadStorageId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'uploads')).outputs.uploadStorageId.value]"
          },
          "vulnerbilityContainerPath": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logging')).outputs.vulnerabilityscansConteinrNamePath.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "14610046787482578136"
            }
          },
          "parameters": {
            "loggingStorageId": {
              "type": "string"
            },
            "loganalyticsId": {
              "type": "string"
            },
            "uploadStorageId": {
              "type": "string"
            },
            "landingRawStorageId": {
              "type": "string"
            },
            "enrichCurateStorageId": {
              "type": "string"
            },
            "databricksId": {
              "type": "string"
            },
            "datafactoryId": {
              "type": "string"
            },
            "synapseStorageId": {
              "type": "string"
            },
            "synapseId": {
              "type": "string"
            },
            "sparkpoolId": {
              "type": "string"
            },
            "keyvaultId": {
              "type": "string"
            },
            "machinelearningId": {
              "type": "string"
            },
            "mlStorageId": {
              "type": "string"
            },
            "mlAcrId": {
              "type": "string"
            },
            "sqlServerId": {
              "type": "string"
            },
            "sqldatabaseId": {
              "type": "string"
            },
            "vulnerbilityContainerPath": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', last(split(parameters('uploadStorageId'), '/')), 'default')]"
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', last(split(parameters('uploadStorageId'), '/')), 'default')]",
              "name": "allLogs",
              "properties": {
                "storageAccountId": "[parameters('loggingStorageId')]",
                "workspaceId": "[parameters('loganalyticsId')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', last(split(parameters('uploadStorageId'), '/')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', last(split(parameters('landingRawStorageId'), '/')), 'default')]"
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', last(split(parameters('landingRawStorageId'), '/')), 'default')]",
              "name": "allLogs",
              "properties": {
                "storageAccountId": "[parameters('loggingStorageId')]",
                "workspaceId": "[parameters('loganalyticsId')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', last(split(parameters('landingRawStorageId'), '/')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', last(split(parameters('enrichCurateStorageId'), '/')), 'default')]"
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', last(split(parameters('enrichCurateStorageId'), '/')), 'default')]",
              "name": "allLogs",
              "properties": {
                "storageAccountId": "[parameters('loggingStorageId')]",
                "workspaceId": "[parameters('loganalyticsId')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', last(split(parameters('enrichCurateStorageId'), '/')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('keyvaultId'), '/')))]",
              "name": "allLogs",
              "properties": {
                "storageAccountId": "[parameters('loggingStorageId')]",
                "workspaceId": "[parameters('loganalyticsId')]",
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ]
              }
            },
            {
              "condition": "[not(empty(parameters('synapseStorageId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "loggingSetting_synapse",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "synapseStorageId": {
                    "value": "[parameters('synapseStorageId')]"
                  },
                  "vulnerbilityContainerPath": {
                    "value": "[parameters('vulnerbilityContainerPath')]"
                  },
                  "loganalyticsId": {
                    "value": "[parameters('loganalyticsId')]"
                  },
                  "sparkpoolId": {
                    "value": "[parameters('sparkpoolId')]"
                  },
                  "loggingStorageId": {
                    "value": "[parameters('loggingStorageId')]"
                  },
                  "synapseId": {
                    "value": "[parameters('synapseId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "11280944852238820256"
                    }
                  },
                  "parameters": {
                    "loggingStorageId": {
                      "type": "string"
                    },
                    "loganalyticsId": {
                      "type": "string"
                    },
                    "synapseStorageId": {
                      "type": "string"
                    },
                    "synapseId": {
                      "type": "string"
                    },
                    "sparkpoolId": {
                      "type": "string"
                    },
                    "vulnerbilityContainerPath": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "loggingStorageName": "[last(split(parameters('loggingStorageId'), '/'))]"
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('synapseStorageId')))]",
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', last(split(parameters('synapseStorageId'), '/')), 'default')]"
                    },
                    {
                      "condition": "[not(empty(parameters('synapseStorageId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', last(split(parameters('synapseStorageId'), '/')), 'default')]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', last(split(parameters('synapseStorageId'), '/')), 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('synapseId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Synapse/workspaces/{0}', last(split(parameters('synapseId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('synapseId')))]",
                      "type": "Microsoft.Synapse/workspaces/auditingSettings",
                      "apiVersion": "2021-06-01",
                      "name": "[format('{0}/{1}', last(split(parameters('synapseId'), '/')), 'default')]",
                      "properties": {
                        "state": "Enabled",
                        "auditActionsAndGroups": [
                          "BATCH_COMPLETED_GROUP",
                          "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                          "FAILED_DATABASE_AUTHENTICATION_GROUP"
                        ],
                        "storageAccountSubscriptionId": "[subscription().subscriptionId]",
                        "storageEndpoint": "[format('https://{0}.blob.{1}/', variables('loggingStorageName'), environment().suffixes.storage)]",
                        "isAzureMonitorTargetEnabled": true
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('sparkpoolId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Synapse/workspaces/{0}/bigDataPools/{1}', last(split(parameters('synapseId'), '/')), last(split(parameters('sparkpoolId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[not(empty(parameters('sqlServerId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "loggingSetting_sql",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "sqlServerId": {
                    "value": "[parameters('sqlServerId')]"
                  },
                  "vulnerbilityContainerPath": {
                    "value": "[parameters('vulnerbilityContainerPath')]"
                  },
                  "loganalyticsId": {
                    "value": "[parameters('loganalyticsId')]"
                  },
                  "loggingStorageId": {
                    "value": "[parameters('loggingStorageId')]"
                  },
                  "sqldatabaseId": {
                    "value": "[parameters('sqldatabaseId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "5387577193383040581"
                    }
                  },
                  "parameters": {
                    "loggingStorageId": {
                      "type": "string"
                    },
                    "loganalyticsId": {
                      "type": "string"
                    },
                    "sqlServerId": {
                      "type": "string"
                    },
                    "sqldatabaseId": {
                      "type": "string"
                    },
                    "vulnerbilityContainerPath": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "loggingStorageName": "[last(split(parameters('loggingStorageId'), '/'))]"
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('sqldatabaseId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', last(split(parameters('sqlServerId'), '/')), last(split(parameters('sqldatabaseId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('sqlServerId')))]",
                      "type": "Microsoft.Sql/servers/auditingSettings",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[format('{0}/{1}', last(split(parameters('sqlServerId'), '/')), 'default')]",
                      "properties": {
                        "auditActionsAndGroups": [
                          "BATCH_COMPLETED_GROUP",
                          "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
                          "FAILED_DATABASE_AUTHENTICATION_GROUP"
                        ],
                        "state": "Enabled",
                        "storageAccountSubscriptionId": "[subscription().subscriptionId]",
                        "storageEndpoint": "[format('https://{0}.blob.{1}/', variables('loggingStorageName'), environment().suffixes.storage)]",
                        "isManagedIdentityInUse": true
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[not(empty(parameters('machinelearningId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "loggingSetting_machinelearning",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "loganalyticsId": {
                    "value": "[parameters('loganalyticsId')]"
                  },
                  "loggingStorageId": {
                    "value": "[parameters('loggingStorageId')]"
                  },
                  "machinelearningId": {
                    "value": "[parameters('machinelearningId')]"
                  },
                  "mlStorageId": {
                    "value": "[parameters('mlStorageId')]"
                  },
                  "mlAcrId": {
                    "value": "[parameters('mlAcrId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "2481534856315127076"
                    }
                  },
                  "parameters": {
                    "loggingStorageId": {
                      "type": "string"
                    },
                    "loganalyticsId": {
                      "type": "string"
                    },
                    "machinelearningId": {
                      "type": "string"
                    },
                    "mlStorageId": {
                      "type": "string"
                    },
                    "mlAcrId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('mlStorageId')))]",
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', last(split(parameters('mlStorageId'), '/')), 'default')]"
                    },
                    {
                      "condition": "[not(empty(parameters('mlStorageId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', last(split(parameters('mlStorageId'), '/')), 'default')]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', last(split(parameters('mlStorageId'), '/')), 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('machinelearningId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', last(split(parameters('machinelearningId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('mlAcrId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', last(split(parameters('mlAcrId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[not(empty(parameters('datafactoryId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "loggingSetting_datafactory",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "loganalyticsId": {
                    "value": "[parameters('loganalyticsId')]"
                  },
                  "loggingStorageId": {
                    "value": "[parameters('loggingStorageId')]"
                  },
                  "datafactoryId": {
                    "value": "[parameters('datafactoryId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "13203839889418048195"
                    }
                  },
                  "parameters": {
                    "loggingStorageId": {
                      "type": "string"
                    },
                    "loganalyticsId": {
                      "type": "string"
                    },
                    "datafactoryId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "condition": "[not(empty(parameters('datafactoryId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DataFactory/factories/{0}', last(split(parameters('datafactoryId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "logAnalyticsDestinationType": "Dedicated",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            },
            {
              "condition": "[not(empty(parameters('databricksId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "loggingSetting_databricks",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "loganalyticsId": {
                    "value": "[parameters('loganalyticsId')]"
                  },
                  "loggingStorageId": {
                    "value": "[parameters('loggingStorageId')]"
                  },
                  "databricksId": {
                    "value": "[parameters('databricksId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.6.18.56646",
                      "templateHash": "10590867447209958847"
                    }
                  },
                  "parameters": {
                    "loggingStorageId": {
                      "type": "string"
                    },
                    "loganalyticsId": {
                      "type": "string"
                    },
                    "databricksId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Databricks/workspaces/{0}', last(split(parameters('databricksId'), '/')))]",
                      "name": "allLogs",
                      "properties": {
                        "storageAccountId": "[parameters('loggingStorageId')]",
                        "workspaceId": "[parameters('loganalyticsId')]",
                        "logs": [
                          {
                            "categoryGroup": "allLogs",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'appKeyvault')]",
        "[resourceId('Microsoft.Resources/deployments', 'dataApps')]",
        "[resourceId('Microsoft.Resources/deployments', 'datalake')]",
        "[resourceId('Microsoft.Resources/deployments', 'logging')]",
        "[resourceId('Microsoft.Resources/deployments', 'loggingRBAC')]",
        "[resourceId('Microsoft.Resources/deployments', 'uploads')]"
      ]
    }
  ]
}